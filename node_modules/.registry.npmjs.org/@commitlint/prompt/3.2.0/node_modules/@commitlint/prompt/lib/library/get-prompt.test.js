'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _getPrompt = require('./get-prompt');

var _getPrompt2 = _interopRequireDefault(_getPrompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('throws without params', function (t) {
	t.throws(function () {
		return (0, _getPrompt2.default)();
	}, /Missing prompter function/);
});

(0, _ava2.default)('throws with incompatible prompter', function (t) {
	t.throws(function () {
		return (0, _getPrompt2.default)('type', {
			prompter() {
				return {};
			}
		});
	}, /prompt.removeAllListeners/);
});

(0, _ava2.default)('returns input unaltered wihtout rules', function (t) {
	return new Promise(function ($return, $error) {
		var message;
		return Promise.resolve((0, _getPrompt2.default)('type', {
			prompter: stub('foobar')
		})).then(function ($await_1) {
			try {
				message = $await_1;

				t.is(message, 'foobar');
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

function stub() {
	var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	return stubPrompter;

	function stubPrompter() {
		var called = [];
		var actions = [];

		var instance = {
			action() {
				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				actions.push(args[0]);
				called.push([instance.action, args]);
			},
			addListener() {
				for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
					args[_key2] = arguments[_key2];
				}

				called.push([instance.addListener, args]);
			},
			catch() {
				for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
					args[_key3] = arguments[_key3];
				}

				called.push([instance.catch, args]);
				return instance;
			},
			command() {
				for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
					args[_key4] = arguments[_key4];
				}

				called.push([instance.command, args]);
				return instance;
			},
			description() {
				for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
					args[_key5] = arguments[_key5];
				}

				called.push([instance.description, args]);
				return instance;
			},
			delimiter() {
				for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
					args[_key6] = arguments[_key6];
				}

				called.push([instance.delimiter, args]);
				return instance;
			},
			log() {
				for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
					args[_key7] = arguments[_key7];
				}

				called.push([instance.log, args]);
				return instance;
			},
			removeAllListeners() {
				for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
					args[_key8] = arguments[_key8];
				}

				called.push([instance.removeAllListeners, args]);
			},
			show() {
				for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
					args[_key9] = arguments[_key9];
				}

				called.push([instance.show, args]);
				return instance;
			},
			ui: {
				redraw: {
					done() {
						for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
							args[_key10] = arguments[_key10];
						}

						called.push([instance.ui.redraw.done, args]);
					}
				}
			},
			called
		};

		setTimeout(function () {
			actions[0]({
				text: Array.isArray(input) ? input : [input]
			});
		});

		return instance;
	}
}
//# sourceMappingURL=get-prompt.test.js.map