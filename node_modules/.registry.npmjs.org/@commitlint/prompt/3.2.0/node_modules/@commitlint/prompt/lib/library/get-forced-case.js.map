{"version":3,"sources":["../../src/library/get-forced-case.js"],"names":["getForcedCase","rule","severity","applicable","value","negated"],"mappings":";;;;;;;;;;kBAKwBA,a;;;;AALxB;;;;;AAKe,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC3C,KAAI,CAACA,IAAL,EAAW;AACV,SAAO,IAAP;AACA;;AAH0C,0CAKDA,IALC;AAAA;AAAA,KAKjCC,QALiC;AAAA,KAKvBC,UALuB;AAAA,KAKXC,KALW;;AAM3C,KAAMC,UAAUF,eAAe,OAA/B;;AAEA,KAAID,aAAa,CAAjB,EAAoB;AACnB,SAAO,IAAP;AACA;;AAED,KAAIG,OAAJ,EAAa;AACZ,SAAOD,UAAU,WAAV,GAAwB,WAAxB,GAAsC,WAA7C;AACA;;AAED,QAAOA,UAAU,WAAV,GAAwB,WAAxB,GAAsC,WAA7C;AACA","file":"get-forced-case.js","sourcesContent":["/**\n * Get forced case for rule\n * @param {object} rule to parse\n * @return {string|null} transform function applying the enforced case\n */\nexport default function getForcedCase(rule) {\n\tif (!rule) {\n\t\treturn null;\n\t}\n\n\tconst [, [severity, applicable, value]] = rule;\n\tconst negated = applicable === 'never';\n\n\tif (severity === 0) {\n\t\treturn null;\n\t}\n\n\tif (negated) {\n\t\treturn value === 'lowerCase' ? 'upperCase' : 'lowerCase';\n\t}\n\n\treturn value === 'lowerCase' ? 'lowerCase' : 'upperCase';\n}\n"]}