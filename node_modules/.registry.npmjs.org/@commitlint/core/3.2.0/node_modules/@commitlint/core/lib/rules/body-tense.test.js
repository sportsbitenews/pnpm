'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _bodyTense = require('./body-tense');

var _bodyTense2 = _interopRequireDefault(_bodyTense);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var messages = {
	empty: 'chore: \n',
	presentImperative: `chore: \nwe implement things`,
	presentParticiple: `chore: \nimplementing things`,
	presentThirdPerson: `chore: \nimplements things`,
	past: `chore: \nwe did implement things`,
	mixed: `chore: \nimplement, implementing, implements, implemented`
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	presentImperative: (0, _parse2.default)(messages.presentImperative),
	presentParticiple: (0, _parse2.default)(messages.presentParticiple),
	presentThirdPerson: (0, _parse2.default)(messages.presentImperative),
	past: (0, _parse2.default)(messages.past),
	mixed: (0, _parse2.default)(messages.mixed)
};

(0, _ava2.default)('empty succeeds', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense, _footerTense2, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_1) {
			try {
				_footerTense = (0, _bodyTense2.default)($await_1, '', ['present-imperative']), _footerTense2 = (0, _slicedToArray3.default)(_footerTense, 1), actual = _footerTense2[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('present succeeds "always present-imperative"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense3, _footerTense4, actual, expected;

		return Promise.resolve(parsed.presentImperative).then(function ($await_2) {
			try {
				_footerTense3 = (0, _bodyTense2.default)($await_2, 'always', ['present-imperative']), _footerTense4 = (0, _slicedToArray3.default)(_footerTense3, 1), actual = _footerTense4[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('present fails "never present-imperative"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense5, _footerTense6, actual, expected;

		return Promise.resolve(parsed.presentImperative).then(function ($await_3) {
			try {
				_footerTense5 = (0, _bodyTense2.default)($await_3, 'never', ['present-imperative']), _footerTense6 = (0, _slicedToArray3.default)(_footerTense5, 1), actual = _footerTense6[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('present succeeds "always present-participle"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense7, _footerTense8, actual, expected;

		return Promise.resolve(parsed.presentParticiple).then(function ($await_4) {
			try {
				_footerTense7 = (0, _bodyTense2.default)($await_4, 'always', ['present-participle']), _footerTense8 = (0, _slicedToArray3.default)(_footerTense7, 1), actual = _footerTense8[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('present fails "never present-participle"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense9, _footerTense10, actual, expected;

		return Promise.resolve(parsed.presentParticiple).then(function ($await_5) {
			try {
				_footerTense9 = (0, _bodyTense2.default)($await_5, 'never', ['present-participle']), _footerTense10 = (0, _slicedToArray3.default)(_footerTense9, 1), actual = _footerTense10[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('present succeeds "always present-third-person"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense11, _footerTense12, actual, expected;

		return Promise.resolve(parsed.presentThirdPerson).then(function ($await_6) {
			try {
				_footerTense11 = (0, _bodyTense2.default)($await_6, 'always', ['present-third-person']), _footerTense12 = (0, _slicedToArray3.default)(_footerTense11, 1), actual = _footerTense12[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('present fails "never present-third-person"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense13, _footerTense14, actual, expected;

		return Promise.resolve(parsed.presentThirdPerson).then(function ($await_7) {
			try {
				_footerTense13 = (0, _bodyTense2.default)($await_7, 'never', ['present-third-person']), _footerTense14 = (0, _slicedToArray3.default)(_footerTense13, 1), actual = _footerTense14[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('past should succedd "always past-tense"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense15, _footerTense16, actual, expected;

		return Promise.resolve(parsed.past).then(function ($await_8) {
			try {
				_footerTense15 = (0, _bodyTense2.default)($await_8, 'always', ['past-tense']), _footerTense16 = (0, _slicedToArray3.default)(_footerTense15, 1), actual = _footerTense16[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('past fails "never past-tense"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense17, _footerTense18, actual, expected;

		return Promise.resolve(parsed.past).then(function ($await_9) {
			try {
				_footerTense17 = (0, _bodyTense2.default)($await_9, 'never', ['past-tense']), _footerTense18 = (0, _slicedToArray3.default)(_footerTense17, 1), actual = _footerTense18[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('mixed fails "always present-third-person"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense19, _footerTense20, actual, expected;

		return Promise.resolve(parsed.mixed).then(function ($await_10) {
			try {
				_footerTense19 = (0, _bodyTense2.default)($await_10, 'always', ['present-third-person']), _footerTense20 = (0, _slicedToArray3.default)(_footerTense19, 1), actual = _footerTense20[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('mixed fails "always present-imperative"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense21, _footerTense22, actual, expected;

		return Promise.resolve(parsed.mixed).then(function ($await_11) {
			try {
				_footerTense21 = (0, _bodyTense2.default)($await_11, 'always', ['present-imperative']), _footerTense22 = (0, _slicedToArray3.default)(_footerTense21, 1), actual = _footerTense22[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('present fails "always present-participle"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense23, _footerTense24, actual, expected;

		return Promise.resolve(parsed.mixed).then(function ($await_12) {
			try {
				_footerTense23 = (0, _bodyTense2.default)($await_12, 'always', ['present-participle']), _footerTense24 = (0, _slicedToArray3.default)(_footerTense23, 1), actual = _footerTense24[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('mixed fails "always past-tense"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense25, _footerTense26, actual, expected;

		return Promise.resolve(parsed.mixed).then(function ($await_13) {
			try {
				_footerTense25 = (0, _bodyTense2.default)($await_13, 'always', ['past-tense']), _footerTense26 = (0, _slicedToArray3.default)(_footerTense25, 1), actual = _footerTense26[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('mixed succeeds "always present-third-person, present-imperative, present-participle, past-tense"', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense27, _footerTense28, actual, expected;

		return Promise.resolve(parsed.mixed).then(function ($await_14) {
			try {
				_footerTense27 = (0, _bodyTense2.default)($await_14, 'always', ['present-third-person', 'present-imperative', 'present-participle', 'past-tense']), _footerTense28 = (0, _slicedToArray3.default)(_footerTense27, 1), actual = _footerTense28[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('mixed succeeds "never allowed: present-third-person" and matching ignored: implements', function (t) {
	return new Promise(function ($return, $error) {
		var _footerTense29, _footerTense30, actual, expected;

		return Promise.resolve(parsed.mixed).then(function ($await_15) {
			try {
				_footerTense29 = (0, _bodyTense2.default)($await_15, 'never', {
					allowed: ['present-third-person'],
					ignored: ['implements']
				}), _footerTense30 = (0, _slicedToArray3.default)(_footerTense29, 1), actual = _footerTense30[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});
//# sourceMappingURL=body-tense.test.js.map