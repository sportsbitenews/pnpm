{"version":3,"sources":["../../src/library/parse.test.js"],"names":["t","throws","message","actual","is","raw","m","result","expected","body","footer","header","mentions","merge","notes","references","revert","scope","subject","type","deepEqual","process","cwd","changelogOpts","undefined","parserOpts"],"mappings":"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","file":"parse.test.js","sourcesContent":["import importFrom from 'import-from';\nimport test from 'ava';\nimport parse from './parse';\n\ntest('throws when called without params', t => {\n\tt.throws(parse(), /Expected a raw commit/);\n});\n\ntest('throws when called with empty message', t => {\n\tt.throws(parse(''), /Expected a raw commit/);\n});\n\ntest('returns object with raw message', async t => {\n\tconst message = 'type(scope): subject';\n\tconst actual = await parse(message);\n\tt.is(actual.raw, message);\n});\n\ntest('calls parser with message and passed options', t => {\n\tconst message = 'message';\n\n\tparse(message, m => {\n\t\tt.is(message, m);\n\t\treturn {};\n\t});\n});\n\ntest('passes object up from parser function', async t => {\n\tconst message = 'message';\n\tconst result = {};\n\tconst actual = await parse(message, () => result);\n\tt.is(actual, result);\n});\n\ntest('returns object with expected keys', async t => {\n\tconst message = 'message';\n\tconst actual = await parse(message);\n\tconst expected = {\n\t\tbody: null,\n\t\tfooter: null,\n\t\theader: 'message',\n\t\tmentions: [],\n\t\tmerge: null,\n\t\tnotes: [],\n\t\traw: 'message',\n\t\treferences: [],\n\t\trevert: null,\n\t\tscope: null,\n\t\tsubject: null,\n\t\ttype: null\n\t};\n\tt.deepEqual(actual, expected);\n});\n\ntest('uses angular grammar', async t => {\n\tconst message = 'type(scope): subject';\n\tconst actual = await parse(message);\n\tconst expected = {\n\t\tbody: null,\n\t\tfooter: null,\n\t\theader: 'type(scope): subject',\n\t\tmentions: [],\n\t\tmerge: null,\n\t\tnotes: [],\n\t\traw: 'type(scope): subject',\n\t\treferences: [],\n\t\trevert: null,\n\t\tscope: 'scope',\n\t\tsubject: 'subject',\n\t\ttype: 'type'\n\t};\n\tt.deepEqual(actual, expected);\n});\n\ntest('uses custom opts parser', async t => {\n\tconst message = 'type(scope)-subject';\n\tconst changelogOpts = await importFrom(\n\t\tprocess.cwd(),\n\t\t'./fixtures/parser-preset/conventional-changelog-custom'\n\t);\n\tconst actual = await parse(message, undefined, changelogOpts.parserOpts);\n\tconst expected = {\n\t\tbody: null,\n\t\tfooter: null,\n\t\theader: 'type(scope)-subject',\n\t\tmentions: [],\n\t\tmerge: null,\n\t\tnotes: [],\n\t\traw: 'type(scope)-subject',\n\t\treferences: [],\n\t\trevert: null,\n\t\tscope: 'scope',\n\t\tsubject: 'subject',\n\t\ttype: 'type'\n\t};\n\tt.deepEqual(actual, expected);\n});\n\ntest('supports scopes with /', async t => {\n\tconst message = 'type(some/scope): subject';\n\tconst actual = await parse(message);\n\tt.is(actual.scope, 'some/scope');\n\tt.is(actual.subject, 'subject');\n});\n"]}