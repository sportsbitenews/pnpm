'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _lang = require('./lang');

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var messages = {
	empty: '(): \n',
	eng: '(): this is a serious subject',
	deu: '(): Dies ist ein ernstes Subjekt'
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	eng: (0, _parse2.default)(messages.eng),
	deu: (0, _parse2.default)(messages.deu)
};

(0, _ava2.default)('empty succeeds', function (t) {
	return new Promise(function ($return, $error) {
		var _check, _check2, actual, expected;

		return Promise.resolve(parsed.eng).then(function ($await_1) {
			try {
				_check = (0, _lang2.default)($await_1, '', 'eng'), _check2 = (0, _slicedToArray3.default)(_check, 1), actual = _check2[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('english against "eng" succeeds', function (t) {
	return new Promise(function ($return, $error) {
		var _check3, _check4, actual, expected;

		return Promise.resolve(parsed.eng).then(function ($await_2) {
			try {
				_check3 = (0, _lang2.default)($await_2, '', 'eng'), _check4 = (0, _slicedToArray3.default)(_check3, 1), actual = _check4[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('english against "always eng" succeeds', function (t) {
	return new Promise(function ($return, $error) {
		var _check5, _check6, actual, expected;

		return Promise.resolve(parsed.eng).then(function ($await_3) {
			try {
				_check5 = (0, _lang2.default)($await_3, 'always', 'eng'), _check6 = (0, _slicedToArray3.default)(_check5, 1), actual = _check6[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('english against "never eng" fails', function (t) {
	return new Promise(function ($return, $error) {
		var _check7, _check8, actual, expected;

		return Promise.resolve(parsed.eng).then(function ($await_4) {
			try {
				_check7 = (0, _lang2.default)($await_4, 'never', 'eng'), _check8 = (0, _slicedToArray3.default)(_check7, 1), actual = _check8[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('english against "deu" fails', function (t) {
	return new Promise(function ($return, $error) {
		var _check9, _check10, actual, expected;

		return Promise.resolve(parsed.eng).then(function ($await_5) {
			try {
				_check9 = (0, _lang2.default)($await_5, '', 'deu+'), _check10 = (0, _slicedToArray3.default)(_check9, 1), actual = _check10[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('english against "always deu" fails', function (t) {
	return new Promise(function ($return, $error) {
		var _check11, _check12, actual, expected;

		return Promise.resolve(parsed.eng).then(function ($await_6) {
			try {
				_check11 = (0, _lang2.default)($await_6, 'always', 'deu'), _check12 = (0, _slicedToArray3.default)(_check11, 1), actual = _check12[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('english against "never deu" succeeds', function (t) {
	return new Promise(function ($return, $error) {
		var _check13, _check14, actual, expected;

		return Promise.resolve(parsed.eng).then(function ($await_7) {
			try {
				_check13 = (0, _lang2.default)($await_7, 'never', 'deu'), _check14 = (0, _slicedToArray3.default)(_check13, 1), actual = _check14[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('german against "deu" succeeds', function (t) {
	return new Promise(function ($return, $error) {
		var _check15, _check16, actual, expected;

		return Promise.resolve(parsed.deu).then(function ($await_8) {
			try {
				_check15 = (0, _lang2.default)($await_8, '', 'deu'), _check16 = (0, _slicedToArray3.default)(_check15, 1), actual = _check16[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('german against "always deu" succeeds', function (t) {
	return new Promise(function ($return, $error) {
		var _check17, _check18, actual, expected;

		return Promise.resolve(parsed.deu).then(function ($await_9) {
			try {
				_check17 = (0, _lang2.default)($await_9, 'always', 'deu'), _check18 = (0, _slicedToArray3.default)(_check17, 1), actual = _check18[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('german against "never deu" fails', function (t) {
	return new Promise(function ($return, $error) {
		var _check19, _check20, actual, expected;

		return Promise.resolve(parsed.deu).then(function ($await_10) {
			try {
				_check19 = (0, _lang2.default)($await_10, 'never', 'deu'), _check20 = (0, _slicedToArray3.default)(_check19, 1), actual = _check20[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});
//# sourceMappingURL=lang.test.js.map