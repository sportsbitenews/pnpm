'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _lint = require('./lint');

var _lint2 = _interopRequireDefault(_lint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('throws without params', function (t) {
	t.throws((0, _lint2.default)());
});

(0, _ava2.default)('throws with empty message', function (t) {
	t.throws((0, _lint2.default)(''));
});

(0, _ava2.default)('positive on stub message and no rule', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _lint2.default)('foo: bar')).then(function ($await_1) {
			try {
				actual = $await_1;
				t.true(actual.valid);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('positive on stub message and adhered rule', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _lint2.default)('foo: bar', {
			'type-enum': [2, 'always', ['foo']]
		})).then(function ($await_2) {
			try {
				actual = $await_2;
				t.true(actual.valid);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('negative on stub message and broken rule', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _lint2.default)('foo: bar', {
			'type-enum': [2, 'never', ['foo']]
		})).then(function ($await_3) {
			try {
				actual = $await_3;
				t.false(actual.valid);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('positive on ignored message and broken rule', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _lint2.default)('Revert "some bogus commit"', {
			'type-empty': [2, 'never']
		})).then(function ($await_4) {
			try {
				actual = $await_4;
				t.true(actual.valid);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('positive on stub message and opts', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _lint2.default)('foo-bar', {
			'type-enum': [2, 'always', ['foo']],
			'type-empty': [2, 'never']
		}, {
			parserOpts: {
				headerPattern: /^(\w*)(?:\((.*)\))?-(.*)$/
			}
		})).then(function ($await_5) {
			try {
				actual = $await_5;
				t.true(actual.valid);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});
//# sourceMappingURL=lint.test.js.map