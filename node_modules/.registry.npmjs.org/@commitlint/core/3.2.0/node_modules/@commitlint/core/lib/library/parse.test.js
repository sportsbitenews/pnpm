'use strict';

var _importFrom = require('import-from');

var _importFrom2 = _interopRequireDefault(_importFrom);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('./parse');

var _parse2 = _interopRequireDefault(_parse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('throws when called without params', function (t) {
	t.throws((0, _parse2.default)(), /Expected a raw commit/);
});

(0, _ava2.default)('throws when called with empty message', function (t) {
	t.throws((0, _parse2.default)(''), /Expected a raw commit/);
});

(0, _ava2.default)('returns object with raw message', function (t) {
	return new Promise(function ($return, $error) {
		var message, actual;

		message = 'type(scope): subject';
		return Promise.resolve((0, _parse2.default)(message)).then(function ($await_1) {
			try {
				actual = $await_1;
				t.is(actual.raw, message);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('calls parser with message and passed options', function (t) {
	var message = 'message';

	(0, _parse2.default)(message, function (m) {
		t.is(message, m);
		return {};
	});
});

(0, _ava2.default)('passes object up from parser function', function (t) {
	return new Promise(function ($return, $error) {
		var message, result, actual;

		message = 'message';
		result = {};
		return Promise.resolve((0, _parse2.default)(message, function () {
			return result;
		})).then(function ($await_2) {
			try {
				actual = $await_2;
				t.is(actual, result);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('returns object with expected keys', function (t) {
	return new Promise(function ($return, $error) {
		var message, actual, expected;

		message = 'message';
		return Promise.resolve((0, _parse2.default)(message)).then(function ($await_3) {
			try {
				actual = $await_3;
				expected = {
					body: null,
					footer: null,
					header: 'message',
					mentions: [],
					merge: null,
					notes: [],
					raw: 'message',
					references: [],
					revert: null,
					scope: null,
					subject: null,
					type: null
				};
				t.deepEqual(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('uses angular grammar', function (t) {
	return new Promise(function ($return, $error) {
		var message, actual, expected;

		message = 'type(scope): subject';
		return Promise.resolve((0, _parse2.default)(message)).then(function ($await_4) {
			try {
				actual = $await_4;
				expected = {
					body: null,
					footer: null,
					header: 'type(scope): subject',
					mentions: [],
					merge: null,
					notes: [],
					raw: 'type(scope): subject',
					references: [],
					revert: null,
					scope: 'scope',
					subject: 'subject',
					type: 'type'
				};
				t.deepEqual(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('uses custom opts parser', function (t) {
	return new Promise(function ($return, $error) {
		var message, changelogOpts, actual, expected;

		message = 'type(scope)-subject';
		return Promise.resolve((0, _importFrom2.default)(process.cwd(), './fixtures/parser-preset/conventional-changelog-custom')).then(function ($await_5) {
			try {
				changelogOpts = $await_5;
				return Promise.resolve((0, _parse2.default)(message, undefined, changelogOpts.parserOpts)).then(function ($await_6) {
					try {
						actual = $await_6;
						expected = {
							body: null,
							footer: null,
							header: 'type(scope)-subject',
							mentions: [],
							merge: null,
							notes: [],
							raw: 'type(scope)-subject',
							references: [],
							revert: null,
							scope: 'scope',
							subject: 'subject',
							type: 'type'
						};
						t.deepEqual(actual, expected);
						return $return();
					} catch ($boundEx) {
						return $error($boundEx);
					}
				}.bind(this), $error);
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('supports scopes with /', function (t) {
	return new Promise(function ($return, $error) {
		var message, actual;

		message = 'type(some/scope): subject';
		return Promise.resolve((0, _parse2.default)(message)).then(function ($await_7) {
			try {
				actual = $await_7;
				t.is(actual.scope, 'some/scope');
				t.is(actual.subject, 'subject');
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});
//# sourceMappingURL=parse.test.js.map