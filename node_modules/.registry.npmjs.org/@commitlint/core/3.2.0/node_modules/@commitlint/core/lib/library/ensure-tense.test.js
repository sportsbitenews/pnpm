'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _ensureTense = require('./ensure-tense');

var _ensureTense2 = _interopRequireDefault(_ensureTense);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('true for empty', function (t) {
	var actual = (0, _ensureTense2.default)('', []);
	t.is(actual.matches, true);
});

_ava2.default.failing('true for past-tense against past-tense', function (t) {
	var actual = (0, _ensureTense2.default)('implemented', ['past-tense']);
	t.is(actual.matches, true);
});

(0, _ava2.default)('true for present-imperative against present-imperative', function (t) {
	var actual = (0, _ensureTense2.default)('implement', ['present-imperative']);
	t.is(actual.matches, true);
});

(0, _ava2.default)('true for present-participle against present-participle', function (t) {
	var actual = (0, _ensureTense2.default)('implementing', ['present-participle']);
	t.is(actual.matches, true);
});

(0, _ava2.default)('true for present-third-person against present-third-person', function (t) {
	var actual = (0, _ensureTense2.default)('implements', ['present-third-person']);
	t.is(actual.matches, true);
});

(0, _ava2.default)('false for past-tense against present-third-person', function (t) {
	var actual = (0, _ensureTense2.default)('implemented', ['present-third-person']);
	t.is(actual.matches, false);
	t.deepEqual(actual.offending, [{ lemma: 'implemented', tense: 'present-imperative' }]);
});

_ava2.default.failing('false for present-imperative against past-tense', function (t) {
	var actual = (0, _ensureTense2.default)('implement', ['past-tense']);
	t.is(actual.matches, false);
	t.deepEqual(actual.offending, [{ lemma: 'implement', tense: 'present-imperative' }]);
});

(0, _ava2.default)('false for present-participle against present-third-person', function (t) {
	var actual = (0, _ensureTense2.default)('implementing', ['present-third-person']);
	t.is(actual.matches, false);
	t.deepEqual(actual.offending, [{ lemma: 'implementing', tense: 'present-participle' }]);
});

_ava2.default.failing('false for present-third-person against past-tense', function (t) {
	var actual = (0, _ensureTense2.default)('implements', ['past-tense']);
	t.is(actual.matches, false);
	t.deepEqual(actual.offending, [{ lemma: 'implements', tense: 'present-third-person' }]);
});
//# sourceMappingURL=ensure-tense.test.js.map