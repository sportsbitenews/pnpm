{"version":3,"sources":["../src/read.test.js"],"names":["rm","beforeEach","t","initRepository","context","repos","afterEach","always","err","console","log","Promise","all","map","repo","cleanRepository","serial","expected","edit","actual","deepEqual","process","chdir","cloneRepository","repository","url","clone","throws","from","true","message","indexOf","previous","cwd","directory","rand","source","args","randomBytes","Math","ceil","toString","slice"],"mappings":"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","file":"read.test.js","sourcesContent":["import {tmpdir} from 'os';\nimport crypto from 'crypto';\nimport {join} from 'path';\n\nimport test from 'ava';\nimport denodeify from 'denodeify';\nimport execa from 'execa';\nimport {mkdir, writeFile} from 'mz/fs';\nimport exists from 'path-exists';\nimport rimraf from 'rimraf';\n\nimport pkg from '../package';\nimport read from './read';\n\nconst rm = denodeify(rimraf);\n\ntest.beforeEach(async t => {\n\tt.context.repos = [await initRepository()];\n});\n\ntest.afterEach.always(async t => {\n\ttry {\n\t\tawait Promise.all(t.context.repos.map(async repo => cleanRepository(repo)));\n\t\tt.context.repos = [];\n\t} catch (err) {\n\t\tconsole.log({err});\n\t}\n});\n\ntest.serial('get edit commit message from git root', async t => {\n\tawait writeFile('alpha.txt', 'alpha');\n\tawait execa('git', ['add', '.']);\n\tawait execa('git', ['commit', '-m', 'alpha']);\n\tconst expected = ['alpha\\n\\n'];\n\tconst actual = await read({edit: true});\n\tt.deepEqual(actual, expected);\n});\n\ntest.serial('get history commit messages', async t => {\n\tawait writeFile('alpha.txt', 'alpha');\n\tawait execa('git', ['add', 'alpha.txt']);\n\tawait execa('git', ['commit', '-m', 'alpha']);\n\tawait execa('git', ['rm', 'alpha.txt']);\n\tawait execa('git', ['commit', '-m', 'remove alpha']);\n\n\tconst expected = ['remove alpha\\n\\n', 'alpha\\n\\n'];\n\tconst actual = await read({});\n\tt.deepEqual(actual, expected);\n});\n\ntest.serial('get edit commit message from git subdirectory', async t => {\n\tawait mkdir('beta');\n\tawait writeFile('beta/beta.txt', 'beta');\n\tprocess.chdir('beta');\n\tawait execa('git', ['add', '.']);\n\tawait execa('git', ['commit', '-m', 'beta']);\n\n\tconst expected = ['beta\\n\\n'];\n\tconst actual = await read({edit: true});\n\tt.deepEqual(actual, expected);\n});\n\ntest.serial('get history commit messages from shallow clone', async t => {\n\tconst [repo] = t.context.repos;\n\n\tawait writeFile('alpha.txt', 'alpha');\n\tawait execa('git', ['add', 'alpha.txt']);\n\tawait execa('git', ['commit', '-m', 'alpha']);\n\n\tconst clone = await cloneRepository(pkg.repository.url, repo, '--depth', '1');\n\tt.context.repos = [...t.context.repos, clone];\n\n\tconst err = await t.throws(read({from: 'master'}));\n\tt.true(\n\t\terr.message.indexOf('Could not get git history from shallow clone') > -1\n\t);\n});\n\nasync function initRepository() {\n\tconst previous = process.cwd();\n\tconst directory = join(tmpdir(), rand());\n\n\tawait execa('git', ['init', directory]);\n\n\tprocess.chdir(directory);\n\n\tawait execa('git', ['config', 'user.email', 'test@example.com']);\n\tawait execa('git', ['config', 'user.name', 'ava']);\n\n\treturn {directory, previous};\n}\n\nasync function cloneRepository(source, context, ...args) {\n\tconst directory = join(tmpdir(), rand());\n\tawait execa('git', ['clone', ...args, source, directory]);\n\tprocess.chdir(directory);\n\n\tawait execa('git', ['config', 'user.email', 'test@example.com']);\n\tawait execa('git', ['config', 'user.name', 'ava']);\n\n\treturn {directory, previous: context.previous};\n}\n\nasync function cleanRepository(repo) {\n\tif (repo.previous && repo.previous !== process.cwd()) {\n\t\tprocess.chdir(repo.previous);\n\t}\n\n\tif (await exists(repo.directory)) {\n\t\tawait rm(repo.directory);\n\t}\n}\n\nfunction rand() {\n\treturn crypto.randomBytes(Math.ceil(6)).toString('hex').slice(0, 12);\n}\n"]}