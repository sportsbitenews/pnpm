{"version":3,"sources":["../../src/library/ensure-tense.test.js"],"names":["actual","t","is","matches","failing","deepEqual","offending","lemma","tense"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,mBAAK,gBAAL,EAAuB,aAAK;AAC3B,KAAMA,SAAS,2BAAO,EAAP,EAAW,EAAX,CAAf;AACAC,GAAEC,EAAF,CAAKF,OAAOG,OAAZ,EAAqB,IAArB;AACA,CAHD;;AAKA,cAAKC,OAAL,CAAa,wCAAb,EAAuD,aAAK;AAC3D,KAAMJ,SAAS,2BAAO,aAAP,EAAsB,CAAC,YAAD,CAAtB,CAAf;AACAC,GAAEC,EAAF,CAAKF,OAAOG,OAAZ,EAAqB,IAArB;AACA,CAHD;;AAKA,mBAAK,wDAAL,EAA+D,aAAK;AACnE,KAAMH,SAAS,2BAAO,WAAP,EAAoB,CAAC,oBAAD,CAApB,CAAf;AACAC,GAAEC,EAAF,CAAKF,OAAOG,OAAZ,EAAqB,IAArB;AACA,CAHD;;AAKA,mBAAK,wDAAL,EAA+D,aAAK;AACnE,KAAMH,SAAS,2BAAO,cAAP,EAAuB,CAAC,oBAAD,CAAvB,CAAf;AACAC,GAAEC,EAAF,CAAKF,OAAOG,OAAZ,EAAqB,IAArB;AACA,CAHD;;AAKA,mBAAK,4DAAL,EAAmE,aAAK;AACvE,KAAMH,SAAS,2BAAO,YAAP,EAAqB,CAAC,sBAAD,CAArB,CAAf;AACAC,GAAEC,EAAF,CAAKF,OAAOG,OAAZ,EAAqB,IAArB;AACA,CAHD;;AAKA,mBAAK,mDAAL,EAA0D,aAAK;AAC9D,KAAMH,SAAS,2BAAO,aAAP,EAAsB,CAAC,sBAAD,CAAtB,CAAf;AACAC,GAAEC,EAAF,CAAKF,OAAOG,OAAZ,EAAqB,KAArB;AACAF,GAAEI,SAAF,CAAYL,OAAOM,SAAnB,EAA8B,CAC7B,EAACC,OAAO,aAAR,EAAuBC,OAAO,oBAA9B,EAD6B,CAA9B;AAGA,CAND;;AAQA,cAAKJ,OAAL,CAAa,iDAAb,EAAgE,aAAK;AACpE,KAAMJ,SAAS,2BAAO,WAAP,EAAoB,CAAC,YAAD,CAApB,CAAf;AACAC,GAAEC,EAAF,CAAKF,OAAOG,OAAZ,EAAqB,KAArB;AACAF,GAAEI,SAAF,CAAYL,OAAOM,SAAnB,EAA8B,CAC7B,EAACC,OAAO,WAAR,EAAqBC,OAAO,oBAA5B,EAD6B,CAA9B;AAGA,CAND;;AAQA,mBAAK,2DAAL,EAAkE,aAAK;AACtE,KAAMR,SAAS,2BAAO,cAAP,EAAuB,CAAC,sBAAD,CAAvB,CAAf;AACAC,GAAEC,EAAF,CAAKF,OAAOG,OAAZ,EAAqB,KAArB;AACAF,GAAEI,SAAF,CAAYL,OAAOM,SAAnB,EAA8B,CAC7B,EAACC,OAAO,cAAR,EAAwBC,OAAO,oBAA/B,EAD6B,CAA9B;AAGA,CAND;;AAQA,cAAKJ,OAAL,CAAa,mDAAb,EAAkE,aAAK;AACtE,KAAMJ,SAAS,2BAAO,YAAP,EAAqB,CAAC,YAAD,CAArB,CAAf;AACAC,GAAEC,EAAF,CAAKF,OAAOG,OAAZ,EAAqB,KAArB;AACAF,GAAEI,SAAF,CAAYL,OAAOM,SAAnB,EAA8B,CAC7B,EAACC,OAAO,YAAR,EAAsBC,OAAO,sBAA7B,EAD6B,CAA9B;AAGA,CAND","file":"ensure-tense.test.js","sourcesContent":["import test from 'ava';\nimport ensure from './ensure-tense';\n\ntest('true for empty', t => {\n\tconst actual = ensure('', []);\n\tt.is(actual.matches, true);\n});\n\ntest.failing('true for past-tense against past-tense', t => {\n\tconst actual = ensure('implemented', ['past-tense']);\n\tt.is(actual.matches, true);\n});\n\ntest('true for present-imperative against present-imperative', t => {\n\tconst actual = ensure('implement', ['present-imperative']);\n\tt.is(actual.matches, true);\n});\n\ntest('true for present-participle against present-participle', t => {\n\tconst actual = ensure('implementing', ['present-participle']);\n\tt.is(actual.matches, true);\n});\n\ntest('true for present-third-person against present-third-person', t => {\n\tconst actual = ensure('implements', ['present-third-person']);\n\tt.is(actual.matches, true);\n});\n\ntest('false for past-tense against present-third-person', t => {\n\tconst actual = ensure('implemented', ['present-third-person']);\n\tt.is(actual.matches, false);\n\tt.deepEqual(actual.offending, [\n\t\t{lemma: 'implemented', tense: 'present-imperative'}\n\t]);\n});\n\ntest.failing('false for present-imperative against past-tense', t => {\n\tconst actual = ensure('implement', ['past-tense']);\n\tt.is(actual.matches, false);\n\tt.deepEqual(actual.offending, [\n\t\t{lemma: 'implement', tense: 'present-imperative'}\n\t]);\n});\n\ntest('false for present-participle against present-third-person', t => {\n\tconst actual = ensure('implementing', ['present-third-person']);\n\tt.is(actual.matches, false);\n\tt.deepEqual(actual.offending, [\n\t\t{lemma: 'implementing', tense: 'present-participle'}\n\t]);\n});\n\ntest.failing('false for present-third-person against past-tense', t => {\n\tconst actual = ensure('implements', ['past-tense']);\n\tt.is(actual.matches, false);\n\tt.deepEqual(actual.offending, [\n\t\t{lemma: 'implements', tense: 'present-third-person'}\n\t]);\n});\n"]}