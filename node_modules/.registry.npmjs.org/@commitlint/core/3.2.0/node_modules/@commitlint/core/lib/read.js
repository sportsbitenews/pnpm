'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pathExists = require('path-exists');

var _pathExists2 = _interopRequireDefault(_pathExists);

var _findUp = require('find-up');

var _findUp2 = _interopRequireDefault(_findUp);

var _gitRawCommits = require('git-raw-commits');

var _gitRawCommits2 = _interopRequireDefault(_gitRawCommits);

var _fs = require('mz/fs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = getCommitMessages;


var SHALLOW_MESSAGE = ['Could not get git history from shallow clone.', 'Use git fetch --shallow before linting.', 'Original issue: https://git.io/vyKMq\n Refer to https://git.io/vyKMv for details.'].join('\n');

// Get commit messages
// Object => Promise<Array<String>>
function getCommitMessages(settings) {
	return new Promise(function ($return, $error) {
		var from, to, edit;
		from = settings.from, to = settings.to, edit = settings.edit;


		if (edit) {
			return $return(getEditCommit());
		}

		return Promise.resolve(isShallow()).then(function ($await_1) {
			try {
				if ($await_1) {
					return $error(new Error(SHALLOW_MESSAGE));
				}

				return $return(getHistoryCommits({ from, to }));
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
}

// Get commit messages from history
// Object => Promise<string[]>
function getHistoryCommits(options) {
	return new Promise(function (resolve, reject) {
		var data = [];
		(0, _gitRawCommits2.default)(options).on('data', function (chunk) {
			return data.push(chunk.toString('utf-8'));
		}).on('error', reject).on('end', function () {
			resolve(data);
		});
	});
}

// Check if the current repository is shallow
// () => Promise<Boolean>
function isShallow() {
	return new Promise(function ($return, $error) {
		var top, shallow;
		return Promise.resolve(toplevel()).then(function ($await_2) {
			try {
				top = $await_2;

				if (typeof top !== 'string') {
					return $error(new TypeError(`Could not find git root - is this a git repository?`));
				}

				shallow = _path2.default.join(top, '.git/shallow');
				return $return((0, _pathExists2.default)(shallow));
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
}

// Get recently edited commit message
// () => Promise<Array<String>>
function getEditCommit() {
	return new Promise(function ($return, $error) {
		var top, editFilePath, editFile;
		return Promise.resolve(toplevel()).then(function ($await_3) {
			try {
				top = $await_3;

				if (typeof top !== 'string') {
					return $error(new TypeError(`Could not find git root - is this a git repository?`));
				}

				editFilePath = _path2.default.join(top, '.git/COMMIT_EDITMSG');
				return Promise.resolve((0, _fs.readFile)(editFilePath)).then(function ($await_4) {
					try {
						editFile = $await_4;
						return $return([`${editFile.toString('utf-8')}\n`]);
					} catch ($boundEx) {
						return $error($boundEx);
					}
				}.bind(this), $error);
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
}

// Find the next git root
// (start: string) => Promise<string | null>
function toplevel() {
	var $args = arguments;return new Promise(function ($return, $error) {
		var cwd, found;
		cwd = $args.length > 0 && $args[0] !== undefined ? $args[0] : process.cwd();
		return Promise.resolve((0, _findUp2.default)('.git', { cwd })).then(function ($await_5) {
			try {
				found = $await_5;

				if (typeof found !== 'string') {
					return $return(found);
				}

				return $return(_path2.default.join(found, '..'));
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
}
module.exports = exports['default'];
//# sourceMappingURL=read.js.map