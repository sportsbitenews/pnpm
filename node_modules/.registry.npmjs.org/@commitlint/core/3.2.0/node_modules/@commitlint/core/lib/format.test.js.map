{"version":3,"sources":["../src/format.test.js"],"names":["ok","bold","green","actual","t","deepEqual","errors","warnings","msg","true","includes","level","name","message","err","prob","color","false","warn","signs","open","process","platform","colors"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,KAAK,gBAAMC,IAAN,CAAY,GAAE,gBAAMC,KAAN,CAAY,GAAZ,CAAiB,iCAA/B,CAAX;;AAEA,mBAAK,gCAAL,EAAuC,aAAK;AAC3C,KAAMC,SAAS,wBAAf;AACAC,GAAEC,SAAF,CAAYF,MAAZ,EAAoB,CAACH,EAAD,CAApB;AACA,CAHD;;AAKA,mBAAK,4CAAL,EAAmD,aAAK;AACvD,KAAMG,SAAS,uBAAO,EAAP,CAAf;AACAC,GAAEC,SAAF,CAAYF,MAAZ,EAAoB,CAACH,EAAD,CAApB;AACA,CAHD;;AAKA,mBAAK,mEAAL,EAA0E,aAAK;AAAA,eAChE,uBAAO;AACpBM,UAAQ,EADY;AAEpBC,YAAU;AAFU,EAAP,CADgE;AAAA;AAAA,KACvEC,GADuE;;AAM9EJ,GAAEK,IAAF,CAAOD,IAAIE,QAAJ,CAAa,wBAAb,CAAP;AACA,CAPD;;AASA,mBAAK,kDAAL,EAAyD,aAAK;AAAA,gBACpC,uBAAO;AAC/BJ,UAAQ,CACP;AACCK,UAAO,CADR;AAECC,SAAM,YAFP;AAGCC,YAAS;AAHV,GADO,CADuB;AAQ/BN,YAAU,CACT;AACCI,UAAO,CADR;AAECC,SAAM,cAFP;AAGCC,YAAS;AAHV,GADS;AARqB,EAAP,CADoC;AAAA;AAAA,KACtDC,GADsD;AAAA,KACjDC,IADiD;AAAA,KAC3CP,GAD2C;;AAkB7DJ,GAAEK,IAAF,CAAO,sBAASK,GAAT,EAAc,oBAAd,CAAP;AACAV,GAAEK,IAAF,CAAO,sBAASM,IAAT,EAAe,qBAAf,CAAP;AACAX,GAAEK,IAAF,CAAO,sBAASD,GAAT,EAAc,wBAAd,CAAP;AACA,CArBD;;AAuBA,mBAAK,4BAAL,EAAmC,aAAK;AAAA,gBACzB,uBAAO;AACpBF,UAAQ,EADY;AAEpBC,YAAU;AAFU,EAAP,CADyB;AAAA;AAAA,KAChCC,GADgC;;AAKvCJ,GAAEK,IAAF,CAAO,uBAAQD,GAAR,CAAP;AACA,CAND;;AAQA,mBAAK,uCAAL,EAA8C,aAAK;AAAA,gBACpC,uBAAO,EAAP,EAAW,EAACQ,OAAO,KAAR,EAAX,CADoC;AAAA;AAAA,KAC3CR,GAD2C;;AAElDJ,GAAEa,KAAF,CAAQ,uBAAQT,GAAR,CAAR;AACA,CAHD;;AAKA,mBAAK,mCAAL,EAA0C,aAAK;AAAA,gBAC1B,uBAAO;AAC1BF,UAAQ,CACP;AACCK,UAAO,CADR;AAECC,SAAM,YAFP;AAGCC,YAAS;AAHV,GADO,CADkB;AAQ1BN,YAAU,CACT;AACCI,UAAO,CADR;AAECC,SAAM,cAFP;AAGCC,YAAS;AAHV,GADS;AARgB,EAAP,CAD0B;AAAA;AAAA,KACvCC,GADuC;AAAA,KAClCI,IADkC;;AAkB9Cd,GAAEK,IAAF,CAAO,sBAASK,GAAT,EAAc,GAAd,CAAP;AACAV,GAAEK,IAAF,CAAO,sBAASS,IAAT,EAAe,GAAf,CAAP;AACA,CApBD;;AAsBA,mBAAK,0BAAL,EAAiC,aAAK;AAAA,iBACjB,uBACnB;AACCZ,UAAQ,CACP;AACCK,UAAO,CADR;AAECC,SAAM,YAFP;AAGCC,YAAS;AAHV,GADO,CADT;AAQCN,YAAU,CACT;AACCI,UAAO,CADR;AAECC,SAAM,cAFP;AAGCC,YAAS;AAHV,GADS;AARX,EADmB,EAiBnB;AACCM,SAAO,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf;AADR,EAjBmB,CADiB;AAAA;AAAA,KAC9BL,GAD8B;AAAA,KACzBI,IADyB;;AAuBrCd,GAAEK,IAAF,CAAO,sBAASK,GAAT,EAAc,KAAd,CAAP;AACAV,GAAEK,IAAF,CAAO,sBAASS,IAAT,EAAe,KAAf,CAAP;AACA,CAzBD;;AA2BA,mBAAK,oCAAL,EAA2C,aAAK;AAAA,iBAC3B,uBAAO;AAC1BZ,UAAQ,CACP;AACCK,UAAO,CADR;AAECC,SAAM,YAFP;AAGCC,YAAS;AAHV,GADO,CADkB;AAQ1BN,YAAU,CACT;AACCI,UAAO,CADR;AAECC,SAAM,cAFP;AAGCC,YAAS;AAHV,GADS;AARgB,EAAP,CAD2B;AAAA;AAAA,KACxCC,GADwC;AAAA,KACnCI,IADmC;;AAkB/Cd,GAAEK,IAAF,CAAO,sBAASK,GAAT,EAAc,gBAAIM,IAAlB,CAAP;AACAhB,GAAEK,IAAF,CAAO,sBAASS,IAAT,EAAe,mBAAOE,IAAtB,CAAP;AACA,CApBD;;AAsBA,IAAIC,QAAQC,QAAR,KAAqB,OAAzB,EAAkC;AACjC,oBAAK,2BAAL,EAAkC,aAAK;AAAA,kBAClB,uBACnB;AACChB,WAAQ,CACP;AACCK,WAAO,CADR;AAECC,UAAM,YAFP;AAGCC,aAAS;AAHV,IADO,CADT;AAQCN,aAAU,CACT;AACCI,WAAO,CADR;AAECC,UAAM,cAFP;AAGCC,aAAS;AAHV,IADS;AARX,GADmB,EAiBnB;AACCU,WAAQ,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB;AADT,GAjBmB,CADkB;AAAA;AAAA,MAC/BT,GAD+B;AAAA,MAC1BI,IAD0B;;AAuBtCd,IAAEK,IAAF,CAAO,sBAASK,GAAT,EAAc,iBAAKM,IAAnB,CAAP;AACAhB,IAAEK,IAAF,CAAO,sBAASS,IAAT,EAAe,oBAAQE,IAAvB,CAAP;AACA,EAzBD;AA0BA","file":"format.test.js","sourcesContent":["import test from 'ava';\nimport hasAnsi from 'has-ansi';\nimport chalk from 'chalk';\nimport {yellow, red, magenta, blue} from 'ansi-styles';\nimport {includes} from 'lodash';\nimport format from './format';\n\nconst ok = chalk.bold(`${chalk.green('✔')}   found 0 problems, 0 warnings`);\n\ntest('does nothing without arguments', t => {\n\tconst actual = format();\n\tt.deepEqual(actual, [ok]);\n});\n\ntest('does nothing without .errors and .warnings', t => {\n\tconst actual = format({});\n\tt.deepEqual(actual, [ok]);\n});\n\ntest('returns empty summary of problems for empty .errors and .warnings', t => {\n\tconst [msg] = format({\n\t\terrors: [],\n\t\twarnings: []\n\t});\n\n\tt.true(msg.includes('0 problems, 0 warnings'));\n});\n\ntest('returns a correct of empty .errors and .warnings', t => {\n\tconst [err, prob, msg] = format({\n\t\terrors: [\n\t\t\t{\n\t\t\t\tlevel: 2,\n\t\t\t\tname: 'error-name',\n\t\t\t\tmessage: 'There was an error'\n\t\t\t}\n\t\t],\n\t\twarnings: [\n\t\t\t{\n\t\t\t\tlevel: 1,\n\t\t\t\tname: 'warning-name',\n\t\t\t\tmessage: 'There was a problem'\n\t\t\t}\n\t\t]\n\t});\n\n\tt.true(includes(err, 'There was an error'));\n\tt.true(includes(prob, 'There was a problem'));\n\tt.true(includes(msg, '1 problems, 1 warnings'));\n});\n\ntest('colors messages by default', t => {\n\tconst [msg] = format({\n\t\terrors: [],\n\t\twarnings: []\n\t});\n\tt.true(hasAnsi(msg));\n});\n\ntest('does not color messages if configured', t => {\n\tconst [msg] = format({}, {color: false});\n\tt.false(hasAnsi(msg));\n});\n\ntest('uses appropriate signs by default', t => {\n\tconst [err, warn] = format({\n\t\terrors: [\n\t\t\t{\n\t\t\t\tlevel: 2,\n\t\t\t\tname: 'error-name',\n\t\t\t\tmessage: 'There was an error'\n\t\t\t}\n\t\t],\n\t\twarnings: [\n\t\t\t{\n\t\t\t\tlevel: 1,\n\t\t\t\tname: 'warning-name',\n\t\t\t\tmessage: 'There was a problem'\n\t\t\t}\n\t\t]\n\t});\n\n\tt.true(includes(err, '✖'));\n\tt.true(includes(warn, '⚠'));\n});\n\ntest('uses signs as configured', t => {\n\tconst [err, warn] = format(\n\t\t{\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tlevel: 2,\n\t\t\t\t\tname: 'error-name',\n\t\t\t\t\tmessage: 'There was an error'\n\t\t\t\t}\n\t\t\t],\n\t\t\twarnings: [\n\t\t\t\t{\n\t\t\t\t\tlevel: 1,\n\t\t\t\t\tname: 'warning-name',\n\t\t\t\t\tmessage: 'There was a problem'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\tsigns: ['HNT', 'WRN', 'ERR']\n\t\t}\n\t);\n\n\tt.true(includes(err, 'ERR'));\n\tt.true(includes(warn, 'WRN'));\n});\n\ntest('uses appropriate colors by default', t => {\n\tconst [err, warn] = format({\n\t\terrors: [\n\t\t\t{\n\t\t\t\tlevel: 2,\n\t\t\t\tname: 'error-name',\n\t\t\t\tmessage: 'There was an error'\n\t\t\t}\n\t\t],\n\t\twarnings: [\n\t\t\t{\n\t\t\t\tlevel: 1,\n\t\t\t\tname: 'warning-name',\n\t\t\t\tmessage: 'There was a problem'\n\t\t\t}\n\t\t]\n\t});\n\n\tt.true(includes(err, red.open));\n\tt.true(includes(warn, yellow.open));\n});\n\nif (process.platform !== 'win32') {\n\ttest('uses colors as configured', t => {\n\t\tconst [err, warn] = format(\n\t\t\t{\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlevel: 2,\n\t\t\t\t\t\tname: 'error-name',\n\t\t\t\t\t\tmessage: 'There was an error'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\twarnings: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlevel: 1,\n\t\t\t\t\t\tname: 'warning-name',\n\t\t\t\t\t\tmessage: 'There was a problem'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tcolors: ['white', 'magenta', 'blue']\n\t\t\t}\n\t\t);\n\n\t\tt.true(includes(err, blue.open));\n\t\tt.true(includes(warn, magenta.open));\n\t});\n}\n"]}