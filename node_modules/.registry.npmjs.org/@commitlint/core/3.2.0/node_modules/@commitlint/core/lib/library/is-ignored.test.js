'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _isIgnored = require('./is-ignored');

var _isIgnored2 = _interopRequireDefault(_isIgnored);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('should return false when called without arguments', function (t) {
	t.false((0, _isIgnored2.default)());
});

(0, _ava2.default)('should return false when called with empty string', function (t) {
	t.false((0, _isIgnored2.default)(''));
});

(0, _ava2.default)('should return false for normal commit', function (t) {
	t.false((0, _isIgnored2.default)('initial commit'));
});

(0, _ava2.default)('should return false for branch merges', function (t) {
	t.true((0, _isIgnored2.default)("Merge branch 'iss53'"));
});

(0, _ava2.default)('should return true for merged PRs', function (t) {
	t.true((0, _isIgnored2.default)('Merge pull request #369'));
});

(0, _ava2.default)('should return true for revert commits', function (t) {
	t.true((0, _isIgnored2.default)(`Revert "docs: add recipe for linting of all commits in a PR (#36)"\n\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`));
	t.true((0, _isIgnored2.default)(`revert "docs: add recipe for linting of all commits in a PR (#36)"\n\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`));
});

(0, _ava2.default)('should return true for npm version commits', function (t) {
	t.true((0, _isIgnored2.default)(`0.0.1`));
	t.true((0, _isIgnored2.default)(`0.1.0`));
	t.true((0, _isIgnored2.default)(`1.0.0`));
	t.true((0, _isIgnored2.default)(`0.0.1-alpha`));
	t.true((0, _isIgnored2.default)(`0.0.1-some-crazy-tag`));
	t.true((0, _isIgnored2.default)(`0.0.1-0`));
	t.true((0, _isIgnored2.default)(`0.0.1-999`));
	t.true((0, _isIgnored2.default)(`0.0.1-alpha.0`));
	t.true((0, _isIgnored2.default)(`0.0.1-alpha.999`));
	t.true((0, _isIgnored2.default)(`0.0.1-some-crazy-tag.0`));
	t.true((0, _isIgnored2.default)(`0.0.1-some-crazy-tag.999`));
	t.true((0, _isIgnored2.default)(`0.0.1-1e69d54`));
	t.true((0, _isIgnored2.default)(`v0.0.1`));
	t.true((0, _isIgnored2.default)(` v3.0.0`));
});

(0, _ava2.default)('should return true fixup commits', function (t) {
	t.true((0, _isIgnored2.default)('fixup! initial commit'));
});

(0, _ava2.default)('should return true squash commits', function (t) {
	t.true((0, _isIgnored2.default)('squash! initial commit'));
});
//# sourceMappingURL=is-ignored.test.js.map