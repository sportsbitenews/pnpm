'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _subjectCase25 = require('./subject-case');

var _subjectCase26 = _interopRequireDefault(_subjectCase25);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var messages = {
	empty: 'chore:\n',
	lowercase: 'chore: subject',
	mixedcase: 'chore: sUbJeCt',
	uppercase: 'chore: SUBJECT'
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	lowercase: (0, _parse2.default)(messages.lowercase),
	mixedcase: (0, _parse2.default)(messages.mixedcase),
	uppercase: (0, _parse2.default)(messages.uppercase)
};

(0, _ava2.default)('with empty subject should succeed for "never lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase, _subjectCase2, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_1) {
			try {
				_subjectCase = (0, _subjectCase26.default)($await_1, 'never', 'lowercase'), _subjectCase2 = (0, _slicedToArray3.default)(_subjectCase, 1), actual = _subjectCase2[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with empty subject should succeed for "always lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase3, _subjectCase4, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_2) {
			try {
				_subjectCase3 = (0, _subjectCase26.default)($await_2, 'always', 'lowercase'), _subjectCase4 = (0, _slicedToArray3.default)(_subjectCase3, 1), actual = _subjectCase4[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with empty subject should succeed for "never uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase5, _subjectCase6, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_3) {
			try {
				_subjectCase5 = (0, _subjectCase26.default)($await_3, 'never', 'uppercase'), _subjectCase6 = (0, _slicedToArray3.default)(_subjectCase5, 1), actual = _subjectCase6[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with empty subject should succeed for "always uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase7, _subjectCase8, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_4) {
			try {
				_subjectCase7 = (0, _subjectCase26.default)($await_4, 'always', 'uppercase'), _subjectCase8 = (0, _slicedToArray3.default)(_subjectCase7, 1), actual = _subjectCase8[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with lowercase subject should fail for "never lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase9, _subjectCase10, actual, expected;

		return Promise.resolve(parsed.lowercase).then(function ($await_5) {
			try {
				_subjectCase9 = (0, _subjectCase26.default)($await_5, 'never', 'lowercase'), _subjectCase10 = (0, _slicedToArray3.default)(_subjectCase9, 1), actual = _subjectCase10[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with lowercase subject should succeed for "always lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase11, _subjectCase12, actual, expected;

		return Promise.resolve(parsed.lowercase).then(function ($await_6) {
			try {
				_subjectCase11 = (0, _subjectCase26.default)($await_6, 'always', 'lowercase'), _subjectCase12 = (0, _slicedToArray3.default)(_subjectCase11, 1), actual = _subjectCase12[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase subject should succeed for "never lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase13, _subjectCase14, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_7) {
			try {
				_subjectCase13 = (0, _subjectCase26.default)($await_7, 'never', 'lowercase'), _subjectCase14 = (0, _slicedToArray3.default)(_subjectCase13, 1), actual = _subjectCase14[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase subject should fail for "always lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase15, _subjectCase16, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_8) {
			try {
				_subjectCase15 = (0, _subjectCase26.default)($await_8, 'always', 'lowercase'), _subjectCase16 = (0, _slicedToArray3.default)(_subjectCase15, 1), actual = _subjectCase16[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase subject should succeed for "never uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase17, _subjectCase18, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_9) {
			try {
				_subjectCase17 = (0, _subjectCase26.default)($await_9, 'never', 'uppercase'), _subjectCase18 = (0, _slicedToArray3.default)(_subjectCase17, 1), actual = _subjectCase18[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase subject should fail for "always uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase19, _subjectCase20, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_10) {
			try {
				_subjectCase19 = (0, _subjectCase26.default)($await_10, 'always', 'uppercase'), _subjectCase20 = (0, _slicedToArray3.default)(_subjectCase19, 1), actual = _subjectCase20[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with uppercase subject should fail for "never uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase21, _subjectCase22, actual, expected;

		return Promise.resolve(parsed.uppercase).then(function ($await_11) {
			try {
				_subjectCase21 = (0, _subjectCase26.default)($await_11, 'never', 'uppercase'), _subjectCase22 = (0, _slicedToArray3.default)(_subjectCase21, 1), actual = _subjectCase22[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with lowercase subject should succeed for "always uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _subjectCase23, _subjectCase24, actual, expected;

		return Promise.resolve(parsed.uppercase).then(function ($await_12) {
			try {
				_subjectCase23 = (0, _subjectCase26.default)($await_12, 'always', 'uppercase'), _subjectCase24 = (0, _slicedToArray3.default)(_subjectCase23, 1), actual = _subjectCase24[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});
//# sourceMappingURL=subject-case.test.js.map