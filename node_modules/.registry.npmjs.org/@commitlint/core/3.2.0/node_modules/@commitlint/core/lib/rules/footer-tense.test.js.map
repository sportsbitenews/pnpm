{"version":3,"sources":["../../src/rules/footer-tense.test.js"],"names":["messages","empty","presentImperative","presentParticiple","presentThirdPerson","past","mixed","parsed","t","actual","expected","is","allowed","ignored"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW;AAChBC,QAAO,sBADS;AAEhBC,oBAAoB,sDAFJ;AAGhBC,oBAAoB,sDAHJ;AAIhBC,qBAAqB,oDAJL;AAKhBC,OAAO,0DALS;AAMhBC,QAAQ;AANQ,CAAjB;;AASA,IAAMC,SAAS;AACdN,QAAO,qBAAMD,SAASC,KAAf,CADO;AAEdC,oBAAmB,qBAAMF,SAASE,iBAAf,CAFL;AAGdC,oBAAmB,qBAAMH,SAASG,iBAAf,CAHL;AAIdC,qBAAoB,qBAAMJ,SAASE,iBAAf,CAJN;AAKdG,OAAM,qBAAML,SAASK,IAAf,CALQ;AAMdC,QAAO,qBAAMN,SAASM,KAAf;AANO,CAAf;;AASA,mBAAK,kCAAL,EAAyC,UAAME,CAAN;AAAA;AAAA,2CAElC,QAFkC;;AACX,yBAAMD,OAAON,KAAb;AAAA;AAAA,mBAAZ,4BAAY,QAAZ,EAAgC,EAAhC,EAAoC,CAAC,oBAAD,CAApC,CAAY,iEAAtBQ,MAAsB;;AACvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AADW;AAAA,CAAzC;;AAMA,mBAAK,oEAAL,EAA2E,UAAMF,CAAN;AAAA;AAAA,4CAIpE,QAJoE;;AAC7C,yBAAMD,OAAOL,iBAAb;AAAA;AAAA,oBAAZ,4BAAY,QAAZ,EAA4C,QAA5C,EAAsD,CACtE,oBADsE,CAAtD,CAAY,kEAAtBO,MAAsB;;AAGvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAJ6B;AAAA;AAAA;AAAA;AAAA;AAD6C;AAAA,CAA3E;;AAQA,mBAAK,gEAAL,EAAuE,UAAMF,CAAN;AAAA;AAAA,4CAIhE,QAJgE;;AACzC,yBAAMD,OAAOL,iBAAb;AAAA;AAAA,oBAAZ,4BAAY,QAAZ,EAA4C,OAA5C,EAAqD,CACrE,oBADqE,CAArD,CAAY,kEAAtBO,MAAsB;;AAGvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAJ6B;AAAA;AAAA;AAAA;AAAA;AADyC;AAAA,CAAvE;;AAQA,mBAAK,oEAAL,EAA2E,UAAMF,CAAN;AAAA;AAAA,4CAIpE,QAJoE;;AAC7C,yBAAMD,OAAOJ,iBAAb;AAAA;AAAA,oBAAZ,4BAAY,QAAZ,EAA4C,QAA5C,EAAsD,CACtE,oBADsE,CAAtD,CAAY,kEAAtBM,MAAsB;;AAGvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAJ6B;AAAA;AAAA;AAAA;AAAA;AAD6C;AAAA,CAA3E;;AAQA,mBAAK,gEAAL,EAAuE,UAAMF,CAAN;AAAA;AAAA,6CAIhE,QAJgE;;AACzC,yBAAMD,OAAOJ,iBAAb;AAAA;AAAA,oBAAZ,4BAAY,QAAZ,EAA4C,OAA5C,EAAqD,CACrE,oBADqE,CAArD,CAAY,mEAAtBM,MAAsB;;AAGvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAJ6B;AAAA;AAAA;AAAA;AAAA;AADyC;AAAA,CAAvE;;AAQA,mBAAK,sEAAL,EAA6E,UAAMF,CAAN;AAAA;AAAA,8CAItE,QAJsE;;AAC/C,yBAAMD,OAAOH,kBAAb;AAAA;AAAA,qBAAZ,4BAAY,QAAZ,EAA6C,QAA7C,EAAuD,CACvE,sBADuE,CAAvD,CAAY,oEAAtBK,MAAsB;;AAGvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAJ6B;AAAA;AAAA;AAAA;AAAA;AAD+C;AAAA,CAA7E;;AAQA,mBAAK,kEAAL,EAAyE,UAAMF,CAAN;AAAA;AAAA,8CAIlE,QAJkE;;AAC3C,yBAAMD,OAAOH,kBAAb;AAAA;AAAA,qBAAZ,4BAAY,QAAZ,EAA6C,OAA7C,EAAsD,CACtE,sBADsE,CAAtD,CAAY,oEAAtBK,MAAsB;;AAGvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAJ6B;AAAA;AAAA;AAAA;AAAA;AAD2C;AAAA,CAAzE;;AAQA,mBAAK,yDAAL,EAAgE,UAAMF,CAAN;AAAA;AAAA,8CAEzD,QAFyD;;AAClC,yBAAMD,OAAOF,IAAb;AAAA;AAAA,qBAAZ,4BAAY,QAAZ,EAA+B,QAA/B,EAAyC,CAAC,YAAD,CAAzC,CAAY,oEAAtBI,MAAsB;;AACvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AADkC;AAAA,CAAhE;;AAMA,mBAAK,qDAAL,EAA4D,UAAMF,CAAN;AAAA;AAAA,8CAErD,QAFqD;;AAC9B,yBAAMD,OAAOF,IAAb;AAAA;AAAA,qBAAZ,4BAAY,QAAZ,EAA+B,OAA/B,EAAwC,CAAC,YAAD,CAAxC,CAAY,oEAAtBI,MAAsB;;AACvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AAD8B;AAAA,CAA5D;;AAMA,mBAAK,iEAAL,EAAwE,UAAMF,CAAN;AAAA;AAAA,8CAIjE,QAJiE;;AAC1C,yBAAMD,OAAOD,KAAb;AAAA;AAAA,qBAAZ,4BAAY,SAAZ,EAAgC,QAAhC,EAA0C,CAC1D,sBAD0D,CAA1C,CAAY,oEAAtBG,MAAsB;;AAGvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAJ6B;AAAA;AAAA;AAAA;AAAA;AAD0C;AAAA,CAAxE;;AAQA,mBAAK,+DAAL,EAAsE,UAAMF,CAAN;AAAA;AAAA,8CAI/D,QAJ+D;;AACxC,yBAAMD,OAAOD,KAAb;AAAA;AAAA,qBAAZ,4BAAY,SAAZ,EAAgC,QAAhC,EAA0C,CAC1D,oBAD0D,CAA1C,CAAY,oEAAtBG,MAAsB;;AAGvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAJ6B;AAAA;AAAA;AAAA;AAAA;AADwC;AAAA,CAAtE;;AAQA,mBAAK,iEAAL,EAAwE,UAAMF,CAAN;AAAA;AAAA,8CAIjE,QAJiE;;AAC1C,yBAAMD,OAAOD,KAAb;AAAA;AAAA,qBAAZ,4BAAY,SAAZ,EAAgC,QAAhC,EAA0C,CAC1D,oBAD0D,CAA1C,CAAY,oEAAtBG,MAAsB;;AAGvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAJ6B;AAAA;AAAA;AAAA;AAAA;AAD0C;AAAA,CAAxE;;AAQA,mBAAK,uDAAL,EAA8D,UAAMF,CAAN;AAAA;AAAA,8CAEvD,QAFuD;;AAChC,yBAAMD,OAAOD,KAAb;AAAA;AAAA,qBAAZ,4BAAY,SAAZ,EAAgC,QAAhC,EAA0C,CAAC,YAAD,CAA1C,CAAY,oEAAtBG,MAAsB;;AACvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AADgC;AAAA,CAA9D;;AAMA,mBAAK,wHAAL,EAA+H,UAAMF,CAAN;AAAA;AAAA,8CAOxH,QAPwH;;AACjG,yBAAMD,OAAOD,KAAb;AAAA;AAAA,qBAAZ,4BAAY,SAAZ,EAAgC,QAAhC,EAA0C,CAC1D,sBAD0D,EAE1D,oBAF0D,EAG1D,oBAH0D,EAI1D,YAJ0D,CAA1C,CAAY,oEAAtBG,MAAsB;;AAMvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAP6B;AAAA;AAAA;AAAA;AAAA;AADiG;AAAA,CAA/H;;AAWA,mBAAK,6GAAL,EAAoH,UAAMF,CAAN;AAAA;AAAA,8CAK7G,QAL6G;;AACtF,yBAAMD,OAAOD,KAAb;AAAA;AAAA,qBAAZ,4BAAY,SAAZ,EAAgC,OAAhC,EAAyC;AACzDM,cAAS,CAAC,sBAAD,CADgD;AAEzDC,cAAS,CAAC,YAAD;AAFgD,KAAzC,CAAY,oEAAtBJ,MAAsB;;AAIvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAL6B;AAAA;AAAA;AAAA;AAAA;AADsF;AAAA,CAApH","file":"footer-tense.test.js","sourcesContent":["import test from 'ava';\nimport parse from '../library/parse';\nimport footerTense from './footer-tense';\n\nconst messages = {\n\tempty: 'chore: subject\\nbody',\n\tpresentImperative: `chore: subject\\nBREAKING CHANGE: we implement things`,\n\tpresentParticiple: `chore: subject\\nBREAKING CHANGE: implementing things`,\n\tpresentThirdPerson: `chore: subject\\nBREAKING CHANGE: implements things`,\n\tpast: `chore: subject\\nBREAKING CHANGE: we did implement things`,\n\tmixed: `chore: subject\\nBREAKING CHANGE: implement, implementing, implements, implemented`\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tpresentImperative: parse(messages.presentImperative),\n\tpresentParticiple: parse(messages.presentParticiple),\n\tpresentThirdPerson: parse(messages.presentImperative),\n\tpast: parse(messages.past),\n\tmixed: parse(messages.mixed)\n};\n\ntest('with empty footer should succeed', async t => {\n\tconst [actual] = footerTense(await parsed.empty, '', ['present-imperative']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with present footer should succeed for \"always present-imperative\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentImperative, 'always', [\n\t\t'present-imperative'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with present footer should fail for \"never present-imperative\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentImperative, 'never', [\n\t\t'present-imperative'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with present footer should succeed for \"always present-participle\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentParticiple, 'always', [\n\t\t'present-participle'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with present footer should fail for \"never present-participle\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentParticiple, 'never', [\n\t\t'present-participle'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with present footer should succeed for \"always present-third-person\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentThirdPerson, 'always', [\n\t\t'present-third-person'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with present footer should fail for \"never present-third-person\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentThirdPerson, 'never', [\n\t\t'present-third-person'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with past footer should succedd for \"always past-tense\"', async t => {\n\tconst [actual] = footerTense(await parsed.past, 'always', ['past-tense']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with past footer should fail for \"never past-tense\"', async t => {\n\tconst [actual] = footerTense(await parsed.past, 'never', ['past-tense']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixed footer should fail for \"always present-third-person\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', [\n\t\t'present-third-person'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixed footer should fail for \"always present-imperative\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', [\n\t\t'present-imperative'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with present footer should fail for \"always present-participle\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', [\n\t\t'present-participle'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixed footer should fail for \"always past-tense\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', ['past-tense']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixed footer should succeed for \"always present-third-person, present-imperative, present-participle, past-tense\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', [\n\t\t'present-third-person',\n\t\t'present-imperative',\n\t\t'present-participle',\n\t\t'past-tense'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixed footer should succeed for \"never allowed: present-third-person\" and matching ignored: implements', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'never', {\n\t\tallowed: ['present-third-person'],\n\t\tignored: ['implements']\n\t});\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}