{"version":3,"sources":["../src/read.js"],"names":["getCommitMessages","SHALLOW_MESSAGE","join","settings","from","to","edit","getEditCommit","isShallow","Error","getHistoryCommits","options","Promise","resolve","reject","data","on","push","chunk","toString","toplevel","top","TypeError","shallow","editFilePath","editFile","cwd","process","found"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;kBAEeA,iB;;;AAEf,IAAMC,kBAAkB,CACvB,+CADuB,EAEvB,yCAFuB,EAGvB,mFAHuB,EAItBC,IAJsB,CAIjB,IAJiB,CAAxB;;AAMA;AACA;AACA,SAAeF,iBAAf,CAAiCG,QAAjC;AAAA;AAAA;AACQC,MADR,GAC0BD,QAD1B,CACQC,IADR,EACcC,EADd,GAC0BF,QAD1B,CACcE,EADd,EACkBC,IADlB,GAC0BH,QAD1B,CACkBG,IADlB;;;AAGC,MAAIA,IAAJ,EAAU;AACT,kBAAOC,eAAP;AACA;;AAEG,yBAAMC,WAAN;AAAA;AAAJ,QAAI,QAAJ,EAAuB;AACtB,mBAAM,IAAIC,KAAJ,CAAUR,eAAV,CAAN;AACA;;AAED,mBAAOS,kBAAkB,EAACN,IAAD,EAAOC,EAAP,EAAlB,CAAP;AAJI;AAAA;AAAA;AAAA;AAPL;AAAA;;AAcA;AACA;AACA,SAASK,iBAAT,CAA2BC,OAA3B,EAAoC;AACnC,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,MAAMC,OAAO,EAAb;AACA,+BAAcJ,OAAd,EACEK,EADF,CACK,MADL,EACa;AAAA,UAASD,KAAKE,IAAL,CAAUC,MAAMC,QAAN,CAAe,OAAf,CAAV,CAAT;AAAA,GADb,EAEEH,EAFF,CAEK,OAFL,EAEcF,MAFd,EAGEE,EAHF,CAGK,KAHL,EAGY,YAAM;AAChBH,WAAQE,IAAR;AACA,GALF;AAMA,EARM,CAAP;AASA;;AAED;AACA;AACA,SAAeP,SAAf;AAAA;AAAA,MACO,GADP,EAOO,OAPP;AACa,yBAAMY,UAAN;AAAA;AAANC,OAAN,GAAY,QAAZ;;AAEA,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC5B,mBAAM,IAAIC,SAAJ,CAAe,qDAAf,CAAN;AACA;;AAEKC,WAAN,GAAgB,eAAKrB,IAAL,CAAUmB,GAAV,EAAe,cAAf,CAAhB;AACA,mBAAO,0BAAOE,OAAP,CAAP;AAPY;AAAA;AAAA;AAAA;AADb;AAAA;;AAWA;AACA;AACA,SAAehB,aAAf;AAAA;AAAA,MACO,GADP,EAOO,YAPP,EAQO,QARP;AACa,yBAAMa,UAAN;AAAA;AAANC,OAAN,GAAY,QAAZ;;AAEA,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC5B,mBAAM,IAAIC,SAAJ,CAAe,qDAAf,CAAN;AACA;;AAEKE,gBAAN,GAAqB,eAAKtB,IAAL,CAAUmB,GAAV,EAAe,qBAAf,CAArB;AACiB,2BAAM,kBAASG,YAAT,CAAN;AAAA;AAAXC,cAAN,GAAiB,QAAjB;AACA,qBAAO,CAAE,GAAEA,SAASN,QAAT,CAAkB,OAAlB,CAA2B,IAA/B,CAAP;AADiB;AAAA;AAAA;AAAA;AAPL;AAAA;AAAA;AAAA;AADb;AAAA;;AAYA;AACA;AACA,SAAeC,QAAf;AAAA;AAAA,WACO,KADP;AAAwBM,KAAxB,2DAA8BC,QAAQD,GAAR,EAA9B;AACe,yBAAM,sBAAG,MAAH,EAAW,EAACA,GAAD,EAAX,CAAN;AAAA;AAARE,SAAN,GAAc,QAAd;;AAEA,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC9B,oBAAOA,KAAP;AACA;;AAED,mBAAO,eAAK1B,IAAL,CAAU0B,KAAV,EAAiB,IAAjB,CAAP;AANc;AAAA;AAAA;AAAA;AADf;AAAA","file":"read.js","sourcesContent":["import path from 'path';\nimport exists from 'path-exists';\nimport up from 'find-up';\nimport gitRawCommits from 'git-raw-commits';\nimport {readFile} from 'mz/fs';\n\nexport default getCommitMessages;\n\nconst SHALLOW_MESSAGE = [\n\t'Could not get git history from shallow clone.',\n\t'Use git fetch --shallow before linting.',\n\t'Original issue: https://git.io/vyKMq\\n Refer to https://git.io/vyKMv for details.'\n].join('\\n');\n\n// Get commit messages\n// Object => Promise<Array<String>>\nasync function getCommitMessages(settings) {\n\tconst {from, to, edit} = settings;\n\n\tif (edit) {\n\t\treturn getEditCommit();\n\t}\n\n\tif (await isShallow()) {\n\t\tthrow new Error(SHALLOW_MESSAGE);\n\t}\n\n\treturn getHistoryCommits({from, to});\n}\n\n// Get commit messages from history\n// Object => Promise<string[]>\nfunction getHistoryCommits(options) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst data = [];\n\t\tgitRawCommits(options)\n\t\t\t.on('data', chunk => data.push(chunk.toString('utf-8')))\n\t\t\t.on('error', reject)\n\t\t\t.on('end', () => {\n\t\t\t\tresolve(data);\n\t\t\t});\n\t});\n}\n\n// Check if the current repository is shallow\n// () => Promise<Boolean>\nasync function isShallow() {\n\tconst top = await toplevel();\n\n\tif (typeof top !== 'string') {\n\t\tthrow new TypeError(`Could not find git root - is this a git repository?`);\n\t}\n\n\tconst shallow = path.join(top, '.git/shallow');\n\treturn exists(shallow);\n}\n\n// Get recently edited commit message\n// () => Promise<Array<String>>\nasync function getEditCommit() {\n\tconst top = await toplevel();\n\n\tif (typeof top !== 'string') {\n\t\tthrow new TypeError(`Could not find git root - is this a git repository?`);\n\t}\n\n\tconst editFilePath = path.join(top, '.git/COMMIT_EDITMSG');\n\tconst editFile = await readFile(editFilePath);\n\treturn [`${editFile.toString('utf-8')}\\n`];\n}\n\n// Find the next git root\n// (start: string) => Promise<string | null>\nasync function toplevel(cwd = process.cwd()) {\n\tconst found = await up('.git', {cwd});\n\n\tif (typeof found !== 'string') {\n\t\treturn found;\n\t}\n\n\treturn path.join(found, '..');\n}\n"]}