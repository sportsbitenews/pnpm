{"version":3,"sources":["../../src/rules/body-tense.test.js"],"names":["messages","empty","presentImperative","presentParticiple","presentThirdPerson","past","mixed","parsed","t","actual","expected","is","allowed","ignored"],"mappings":"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","file":"body-tense.test.js","sourcesContent":["import test from 'ava';\nimport parse from '../library/parse';\nimport footerTense from './body-tense';\n\nconst messages = {\n\tempty: 'chore: \\n',\n\tpresentImperative: `chore: \\nwe implement things`,\n\tpresentParticiple: `chore: \\nimplementing things`,\n\tpresentThirdPerson: `chore: \\nimplements things`,\n\tpast: `chore: \\nwe did implement things`,\n\tmixed: `chore: \\nimplement, implementing, implements, implemented`\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tpresentImperative: parse(messages.presentImperative),\n\tpresentParticiple: parse(messages.presentParticiple),\n\tpresentThirdPerson: parse(messages.presentImperative),\n\tpast: parse(messages.past),\n\tmixed: parse(messages.mixed)\n};\n\ntest('empty succeeds', async t => {\n\tconst [actual] = footerTense(await parsed.empty, '', ['present-imperative']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('present succeeds \"always present-imperative\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentImperative, 'always', [\n\t\t'present-imperative'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('present fails \"never present-imperative\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentImperative, 'never', [\n\t\t'present-imperative'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('present succeeds \"always present-participle\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentParticiple, 'always', [\n\t\t'present-participle'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('present fails \"never present-participle\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentParticiple, 'never', [\n\t\t'present-participle'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('present succeeds \"always present-third-person\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentThirdPerson, 'always', [\n\t\t'present-third-person'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('present fails \"never present-third-person\"', async t => {\n\tconst [actual] = footerTense(await parsed.presentThirdPerson, 'never', [\n\t\t'present-third-person'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('past should succedd \"always past-tense\"', async t => {\n\tconst [actual] = footerTense(await parsed.past, 'always', ['past-tense']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('past fails \"never past-tense\"', async t => {\n\tconst [actual] = footerTense(await parsed.past, 'never', ['past-tense']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('mixed fails \"always present-third-person\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', [\n\t\t'present-third-person'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('mixed fails \"always present-imperative\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', [\n\t\t'present-imperative'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('present fails \"always present-participle\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', [\n\t\t'present-participle'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('mixed fails \"always past-tense\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', ['past-tense']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('mixed succeeds \"always present-third-person, present-imperative, present-participle, past-tense\"', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'always', [\n\t\t'present-third-person',\n\t\t'present-imperative',\n\t\t'present-participle',\n\t\t'past-tense'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('mixed succeeds \"never allowed: present-third-person\" and matching ignored: implements', async t => {\n\tconst [actual] = footerTense(await parsed.mixed, 'never', {\n\t\tallowed: ['present-third-person'],\n\t\tignored: ['implements']\n\t});\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}