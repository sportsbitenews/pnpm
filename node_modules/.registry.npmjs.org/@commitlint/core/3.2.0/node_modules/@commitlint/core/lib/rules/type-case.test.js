'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _typeCase25 = require('./type-case');

var _typeCase26 = _interopRequireDefault(_typeCase25);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var messages = {
	empty: '(scope): subject',
	lowercase: 'type: subject',
	mixedcase: 'tYpE: subject',
	uppercase: 'TYPE: subject'
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	lowercase: (0, _parse2.default)(messages.lowercase),
	mixedcase: (0, _parse2.default)(messages.mixedcase),
	uppercase: (0, _parse2.default)(messages.uppercase)
};

(0, _ava2.default)('with empty type should succeed for "never lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase, _typeCase2, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_1) {
			try {
				_typeCase = (0, _typeCase26.default)($await_1, 'never', 'lowercase'), _typeCase2 = (0, _slicedToArray3.default)(_typeCase, 1), actual = _typeCase2[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with empty type should succeed for "always lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase3, _typeCase4, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_2) {
			try {
				_typeCase3 = (0, _typeCase26.default)($await_2, 'always', 'lowercase'), _typeCase4 = (0, _slicedToArray3.default)(_typeCase3, 1), actual = _typeCase4[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with empty type should succeed for "never uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase5, _typeCase6, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_3) {
			try {
				_typeCase5 = (0, _typeCase26.default)($await_3, 'never', 'uppercase'), _typeCase6 = (0, _slicedToArray3.default)(_typeCase5, 1), actual = _typeCase6[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with empty type should succeed for "always uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase7, _typeCase8, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_4) {
			try {
				_typeCase7 = (0, _typeCase26.default)($await_4, 'always', 'uppercase'), _typeCase8 = (0, _slicedToArray3.default)(_typeCase7, 1), actual = _typeCase8[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with lowercase type should fail for "never lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase9, _typeCase10, actual, expected;

		return Promise.resolve(parsed.lowercase).then(function ($await_5) {
			try {
				_typeCase9 = (0, _typeCase26.default)($await_5, 'never', 'lowercase'), _typeCase10 = (0, _slicedToArray3.default)(_typeCase9, 1), actual = _typeCase10[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with lowercase type should succeed for "always lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase11, _typeCase12, actual, expected;

		return Promise.resolve(parsed.lowercase).then(function ($await_6) {
			try {
				_typeCase11 = (0, _typeCase26.default)($await_6, 'always', 'lowercase'), _typeCase12 = (0, _slicedToArray3.default)(_typeCase11, 1), actual = _typeCase12[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase type should succeed for "never lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase13, _typeCase14, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_7) {
			try {
				_typeCase13 = (0, _typeCase26.default)($await_7, 'never', 'lowercase'), _typeCase14 = (0, _slicedToArray3.default)(_typeCase13, 1), actual = _typeCase14[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase type should fail for "always lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase15, _typeCase16, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_8) {
			try {
				_typeCase15 = (0, _typeCase26.default)($await_8, 'always', 'lowercase'), _typeCase16 = (0, _slicedToArray3.default)(_typeCase15, 1), actual = _typeCase16[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase type should succeed for "never uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase17, _typeCase18, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_9) {
			try {
				_typeCase17 = (0, _typeCase26.default)($await_9, 'never', 'uppercase'), _typeCase18 = (0, _slicedToArray3.default)(_typeCase17, 1), actual = _typeCase18[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase type should fail for "always uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase19, _typeCase20, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_10) {
			try {
				_typeCase19 = (0, _typeCase26.default)($await_10, 'always', 'uppercase'), _typeCase20 = (0, _slicedToArray3.default)(_typeCase19, 1), actual = _typeCase20[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with uppercase type should fail for "never uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase21, _typeCase22, actual, expected;

		return Promise.resolve(parsed.uppercase).then(function ($await_11) {
			try {
				_typeCase21 = (0, _typeCase26.default)($await_11, 'never', 'uppercase'), _typeCase22 = (0, _slicedToArray3.default)(_typeCase21, 1), actual = _typeCase22[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with lowercase type should succeed for "always uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _typeCase23, _typeCase24, actual, expected;

		return Promise.resolve(parsed.uppercase).then(function ($await_12) {
			try {
				_typeCase23 = (0, _typeCase26.default)($await_12, 'always', 'uppercase'), _typeCase24 = (0, _slicedToArray3.default)(_typeCase23, 1), actual = _typeCase24[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});
//# sourceMappingURL=type-case.test.js.map