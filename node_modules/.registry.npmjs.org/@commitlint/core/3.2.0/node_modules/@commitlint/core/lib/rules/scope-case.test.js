'use strict';

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _scopeCase25 = require('./scope-case');

var _scopeCase26 = _interopRequireDefault(_scopeCase25);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var messages = {
	empty: 'chore: subject',
	lowercase: 'chore(scope): subject',
	mixedcase: 'chore(sCoPe): subject',
	uppercase: 'chore(SCOPE): subject'
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	lowercase: (0, _parse2.default)(messages.lowercase),
	mixedcase: (0, _parse2.default)(messages.mixedcase),
	uppercase: (0, _parse2.default)(messages.uppercase)
};

(0, _ava2.default)('with empty scope should succeed for "never lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase, _scopeCase2, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_1) {
			try {
				_scopeCase = (0, _scopeCase26.default)($await_1, 'never', 'lowercase'), _scopeCase2 = (0, _slicedToArray3.default)(_scopeCase, 1), actual = _scopeCase2[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with empty scope should succeed for "always lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase3, _scopeCase4, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_2) {
			try {
				_scopeCase3 = (0, _scopeCase26.default)($await_2, 'always', 'lowercase'), _scopeCase4 = (0, _slicedToArray3.default)(_scopeCase3, 1), actual = _scopeCase4[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with empty scope should succeed for "never uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase5, _scopeCase6, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_3) {
			try {
				_scopeCase5 = (0, _scopeCase26.default)($await_3, 'never', 'uppercase'), _scopeCase6 = (0, _slicedToArray3.default)(_scopeCase5, 1), actual = _scopeCase6[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with empty scope should succeed for "always uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase7, _scopeCase8, actual, expected;

		return Promise.resolve(parsed.empty).then(function ($await_4) {
			try {
				_scopeCase7 = (0, _scopeCase26.default)($await_4, 'always', 'uppercase'), _scopeCase8 = (0, _slicedToArray3.default)(_scopeCase7, 1), actual = _scopeCase8[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with lowercase scope should fail for "never lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase9, _scopeCase10, actual, expected;

		return Promise.resolve(parsed.lowercase).then(function ($await_5) {
			try {
				_scopeCase9 = (0, _scopeCase26.default)($await_5, 'never', 'lowercase'), _scopeCase10 = (0, _slicedToArray3.default)(_scopeCase9, 1), actual = _scopeCase10[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with lowercase scope should succeed for "always lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase11, _scopeCase12, actual, expected;

		return Promise.resolve(parsed.lowercase).then(function ($await_6) {
			try {
				_scopeCase11 = (0, _scopeCase26.default)($await_6, 'always', 'lowercase'), _scopeCase12 = (0, _slicedToArray3.default)(_scopeCase11, 1), actual = _scopeCase12[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase scope should succeed for "never lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase13, _scopeCase14, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_7) {
			try {
				_scopeCase13 = (0, _scopeCase26.default)($await_7, 'never', 'lowercase'), _scopeCase14 = (0, _slicedToArray3.default)(_scopeCase13, 1), actual = _scopeCase14[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase scope should fail for "always lowercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase15, _scopeCase16, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_8) {
			try {
				_scopeCase15 = (0, _scopeCase26.default)($await_8, 'always', 'lowercase'), _scopeCase16 = (0, _slicedToArray3.default)(_scopeCase15, 1), actual = _scopeCase16[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase scope should succeed for "never uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase17, _scopeCase18, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_9) {
			try {
				_scopeCase17 = (0, _scopeCase26.default)($await_9, 'never', 'uppercase'), _scopeCase18 = (0, _slicedToArray3.default)(_scopeCase17, 1), actual = _scopeCase18[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with mixedcase scope should fail for "always uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase19, _scopeCase20, actual, expected;

		return Promise.resolve(parsed.mixedcase).then(function ($await_10) {
			try {
				_scopeCase19 = (0, _scopeCase26.default)($await_10, 'always', 'uppercase'), _scopeCase20 = (0, _slicedToArray3.default)(_scopeCase19, 1), actual = _scopeCase20[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with uppercase scope should fail for "never uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase21, _scopeCase22, actual, expected;

		return Promise.resolve(parsed.uppercase).then(function ($await_11) {
			try {
				_scopeCase21 = (0, _scopeCase26.default)($await_11, 'never', 'uppercase'), _scopeCase22 = (0, _slicedToArray3.default)(_scopeCase21, 1), actual = _scopeCase22[0];

				expected = false;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('with lowercase scope should succeed for "always uppercase"', function (t) {
	return new Promise(function ($return, $error) {
		var _scopeCase23, _scopeCase24, actual, expected;

		return Promise.resolve(parsed.uppercase).then(function ($await_12) {
			try {
				_scopeCase23 = (0, _scopeCase26.default)($await_12, 'always', 'uppercase'), _scopeCase24 = (0, _slicedToArray3.default)(_scopeCase23, 1), actual = _scopeCase24[0];

				expected = true;
				t.is(actual, expected);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});
//# sourceMappingURL=scope-case.test.js.map