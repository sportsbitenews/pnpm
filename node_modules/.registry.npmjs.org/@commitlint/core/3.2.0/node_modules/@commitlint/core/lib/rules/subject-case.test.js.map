{"version":3,"sources":["../../src/rules/subject-case.test.js"],"names":["messages","empty","lowercase","mixedcase","uppercase","parsed","t","actual","expected","is"],"mappings":"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","file":"subject-case.test.js","sourcesContent":["import test from 'ava';\nimport parse from '../library/parse';\nimport subjectCase from './subject-case';\n\nconst messages = {\n\tempty: 'chore:\\n',\n\tlowercase: 'chore: subject',\n\tmixedcase: 'chore: sUbJeCt',\n\tuppercase: 'chore: SUBJECT'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tlowercase: parse(messages.lowercase),\n\tmixedcase: parse(messages.mixedcase),\n\tuppercase: parse(messages.uppercase)\n};\n\ntest('with empty subject should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty subject should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty subject should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should fail for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.lowercase, 'never', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.lowercase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should fail for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase subject should fail for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'never', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}