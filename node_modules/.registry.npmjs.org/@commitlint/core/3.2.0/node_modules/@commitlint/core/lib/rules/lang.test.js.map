{"version":3,"sources":["../../src/rules/lang.test.js"],"names":["messages","empty","eng","deu","parsed","t","actual","expected","is"],"mappings":"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","file":"lang.test.js","sourcesContent":["import test from 'ava';\nimport parse from '../library/parse';\nimport check from './lang';\n\nconst messages = {\n\tempty: '(): \\n',\n\teng: '(): this is a serious subject',\n\tdeu: '(): Dies ist ein ernstes Subjekt'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\teng: parse(messages.eng),\n\tdeu: parse(messages.deu)\n};\n\ntest('empty succeeds', async t => {\n\tconst [actual] = check(await parsed.eng, '', 'eng');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('english against \"eng\" succeeds', async t => {\n\tconst [actual] = check(await parsed.eng, '', 'eng');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('english against \"always eng\" succeeds', async t => {\n\tconst [actual] = check(await parsed.eng, 'always', 'eng');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('english against \"never eng\" fails', async t => {\n\tconst [actual] = check(await parsed.eng, 'never', 'eng');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('english against \"deu\" fails', async t => {\n\tconst [actual] = check(await parsed.eng, '', 'deu+');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('english against \"always deu\" fails', async t => {\n\tconst [actual] = check(await parsed.eng, 'always', 'deu');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('english against \"never deu\" succeeds', async t => {\n\tconst [actual] = check(await parsed.eng, 'never', 'deu');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('german against \"deu\" succeeds', async t => {\n\tconst [actual] = check(await parsed.deu, '', 'deu');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('german against \"always deu\" succeeds', async t => {\n\tconst [actual] = check(await parsed.deu, 'always', 'deu');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('german against \"never deu\" fails', async t => {\n\tconst [actual] = check(await parsed.deu, 'never', 'deu');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}