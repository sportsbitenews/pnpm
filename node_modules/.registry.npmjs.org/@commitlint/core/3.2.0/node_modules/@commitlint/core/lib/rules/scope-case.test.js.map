{"version":3,"sources":["../../src/rules/scope-case.test.js"],"names":["messages","empty","lowercase","mixedcase","uppercase","parsed","t","actual","expected","is"],"mappings":"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","file":"scope-case.test.js","sourcesContent":["import test from 'ava';\nimport parse from '../library/parse';\nimport scopeCase from './scope-case';\n\nconst messages = {\n\tempty: 'chore: subject',\n\tlowercase: 'chore(scope): subject',\n\tmixedcase: 'chore(sCoPe): subject',\n\tuppercase: 'chore(SCOPE): subject'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tlowercase: parse(messages.lowercase),\n\tmixedcase: parse(messages.mixedcase),\n\tuppercase: parse(messages.uppercase)\n};\n\ntest('with empty scope should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase scope should fail for \"never lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.lowercase, 'never', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase scope should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.lowercase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should fail for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should fail for \"always uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should fail for \"never uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.uppercase, 'never', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase scope should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.uppercase, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}