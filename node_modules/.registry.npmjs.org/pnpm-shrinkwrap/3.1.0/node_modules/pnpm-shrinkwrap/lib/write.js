"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const writeFileAtomicCB = require("write-file-atomic");
const thenify = require("thenify");
const rimraf = require("rimraf-then");
const yaml = require("js-yaml");
const constants_1 = require("./constants");
const mkdirp = require("mkdirp-promise");
const logger_1 = require("./logger");
const writeFileAtomic = thenify(writeFileAtomicCB);
const SHRINKWRAP_YAML_FORMAT = {
    sortKeys: true,
    lineWidth: 1000,
    noCompatMode: true,
};
function write(pkgPath, shrinkwrap, privateShrinkwrap) {
    const shrinkwrapPath = path.join(pkgPath, constants_1.SHRINKWRAP_FILENAME);
    const privateShrinkwrapPath = path.join(pkgPath, constants_1.PRIVATE_SHRINKWRAP_FILENAME);
    // empty shrinkwrap is not saved
    if (Object.keys(shrinkwrap.specifiers).length === 0) {
        return Promise.all([
            rimraf(shrinkwrapPath),
            rimraf(privateShrinkwrapPath),
        ]);
    }
    const yamlDoc = yaml.safeDump(shrinkwrap, SHRINKWRAP_YAML_FORMAT);
    // in most cases the `shrinkwrap.yaml` and `node_modules/.shrinkwrap.yaml` are equal
    // in those cases the YAML document can be stringified only once for both files
    // which is more efficient
    if (shrinkwrap === privateShrinkwrap) {
        return Promise.all([
            writeFileAtomic(shrinkwrapPath, yamlDoc),
            mkdirp(path.dirname(privateShrinkwrapPath)).then(() => writeFileAtomic(privateShrinkwrapPath, yamlDoc)),
        ]);
    }
    logger_1.default.warn('`shrinkwrap.yaml` differs from `node_modules/.shrinkwrap.yaml`. ' +
        'To fix this, run `pnpm install`. From pnpm version 2, named installations and uninstallations will fail ' +
        'when the content of `node_modules` won\'t match what the `shrinkwrap.yaml` expects.');
    const privateYamlDoc = yaml.safeDump(privateShrinkwrap, SHRINKWRAP_YAML_FORMAT);
    return Promise.all([
        writeFileAtomic(shrinkwrapPath, yamlDoc),
        mkdirp(path.dirname(privateShrinkwrapPath)).then(() => writeFileAtomic(privateShrinkwrapPath, privateYamlDoc)),
    ]);
}
exports.default = write;
//# sourceMappingURL=write.js.map