"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pnpm_logger_1 = require("pnpm-logger");
const path = require("path");
const byline = require("byline");
const spawn = require("cross-spawn");
const PATH = require("path-name");
const scriptLogger = pnpm_logger_1.default('run_script');
function runScript(command, args, opts) {
    opts = Object.assign({ log: (() => { }) }, opts);
    args = args || [];
    const script = `${command}${args.length ? ' ' + args.join(' ') : ''}`;
    if (script)
        scriptLogger.debug('runscript', script);
    if (!command)
        return Promise.resolve();
    return new Promise((resolve, reject) => {
        const proc = spawn(command, args, {
            cwd: opts.cwd,
            env: createEnv(opts)
        });
        const scriptName = args[args.length - 1];
        proc.on('error', reject);
        byline(proc.stdout).on('data', (line) => pnpm_logger_1.lifecycleLogger.info({
            script: scriptName,
            line: line.toString(),
            pkgId: opts.pkgId,
        }));
        byline(proc.stderr).on('data', (line) => pnpm_logger_1.lifecycleLogger.error({
            script: scriptName,
            line: line.toString(),
            pkgId: opts.pkgId,
        }));
        proc.on('close', (code) => {
            if (code > 0) {
                pnpm_logger_1.lifecycleLogger.error({
                    pkgId: opts.pkgId,
                    script: scriptName,
                    exitCode: code,
                });
                return reject(new Error('Exit code ' + code));
            }
            pnpm_logger_1.lifecycleLogger.info({
                pkgId: opts.pkgId,
                script: scriptName,
                exitCode: code,
            });
            return resolve();
        });
    });
}
exports.default = runScript;
function createEnv(opts) {
    const env = Object.create(process.env);
    env[PATH] = [
        path.join(opts.cwd, 'node_modules', '.bin'),
        path.dirname(process.execPath),
        process.env[PATH]
    ].join(path.delimiter);
    if (opts.userAgent) {
        env['npm_config_user_agent'] = opts.userAgent;
    }
    return env;
}
//# sourceMappingURL=runScript.js.map