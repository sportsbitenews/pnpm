"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pnpm_logger_1 = require("pnpm-logger");
const path = require("path");
const isInnerLink = require("is-inner-link");
const fs = require("mz/fs");
const mkdirp = require("mkdirp-promise");
const isSubdir = require("is-subdir");
function safeIsInnerLink(modules, depName, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const link = yield isInnerLink(modules, depName);
            if (link.isInner)
                return true;
            if (isSubdir(opts.storePath, link.target))
                return true;
            pnpm_logger_1.default.info(`${depName} is linked to ${modules} from ${link.target}`);
            return false;
        }
        catch (err) {
            if (err.code === 'ENOENT')
                return true;
            pnpm_logger_1.default.warn(`Moving ${depName} that was installed by a different package manager to "node_modules/.ignored`);
            const ignoredDir = path.join(modules, '.ignored', depName);
            yield mkdirp(path.dirname(ignoredDir));
            yield fs.rename(path.join(modules, depName), ignoredDir);
            return true;
        }
    });
}
exports.default = safeIsInnerLink;
//# sourceMappingURL=safeIsInnerLink.js.map