"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("mz/fs");
const mkdirp = require("mkdirp-promise");
const rimraf = require("rimraf-then");
function linkIndexedDir(existingDir, newDir, index) {
    return __awaiter(this, void 0, void 0, function* () {
        const stage = `${newDir}+stage`;
        try {
            yield rimraf(stage);
            yield tryLinkIndexedDir(existingDir, stage, index);
            yield rimraf(newDir);
            yield fs.rename(stage, newDir);
        }
        catch (err) {
            try {
                yield rimraf(stage);
            }
            catch (err) { }
            throw err;
        }
    });
}
exports.default = linkIndexedDir;
function tryLinkIndexedDir(existingDir, newDir, index) {
    return __awaiter(this, void 0, void 0, function* () {
        const alldirs = new Set();
        Object.keys(index)
            .forEach(f => {
            alldirs.add(path.join(newDir, path.dirname(f)));
        });
        yield Promise.all(Array.from(alldirs).sort((d1, d2) => d1.length - d2.length).map(dir => mkdirp(dir)));
        yield Promise.all(Object.keys(index)
            .filter(f => !index[f].isDir)
            .map((f) => fs.link(path.join(existingDir, f), path.join(newDir, f))));
    });
}
//# sourceMappingURL=linkIndexedDir.js.map