"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const loadYamlFile = require("load-yaml-file");
const writeYamlFile = require("write-yaml-file");
// The dot prefix is needed because otherwise `npm shrinkwrap`
// thinks that it is an extraneous package.
const modulesFileName = '.modules.yaml';
exports.LAYOUT_VERSION = 1;
function read(modulesPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const modulesYamlPath = path.join(modulesPath, modulesFileName);
        try {
            const m = yield loadYamlFile(modulesYamlPath);
            // for backward compatibility
            if (m['storePath']) {
                m.store = m['storePath'];
                delete m['storePath'];
            }
            return m;
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                throw err;
            }
            return null;
        }
    });
}
exports.read = read;
function save(modulesPath, modules) {
    const modulesYamlPath = path.join(modulesPath, modulesFileName);
    if (modules.skipped)
        modules.skipped.sort();
    return writeYamlFile(modulesYamlPath, modules, { sortKeys: true });
}
exports.save = save;
//# sourceMappingURL=modulesController.js.map