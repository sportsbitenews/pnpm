"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const isCI = require("is-ci");
const readPkg_1 = require("../fs/readPkg");
const writePkg = require("write-pkg");
const package_store_1 = require("package-store");
const pnpm_shrinkwrap_1 = require("pnpm-shrinkwrap");
const modulesController_1 = require("../fs/modulesController");
const mkdirp = require("mkdirp-promise");
const normalizePath = require("normalize-path");
const removeAllExceptOuterLinks = require("remove-all-except-outer-links");
const pnpm_logger_1 = require("pnpm-logger");
const checkCompatibility_1 = require("./checkCompatibility");
function getContext(opts, installType) {
    return __awaiter(this, void 0, void 0, function* () {
        const root = normalizePath(opts.prefix);
        const storePath = opts.store;
        const modulesPath = path.join(root, 'node_modules');
        const modules = yield modulesController_1.read(modulesPath);
        if (modules) {
            try {
                if (Boolean(modules.independentLeaves) !== opts.independentLeaves) {
                    if (modules.independentLeaves) {
                        throw new Error(`This node_modules was installed with --independent-leaves option.
            Use this option or run same command with --force to recreated node_modules`);
                    }
                    throw new Error(`This node_modules was not installed with the --independent-leaves option.
          Don't use --independent-leaves run same command with --force to recreated node_modules`);
                }
                checkCompatibility_1.default(modules, { storePath, modulesPath });
            }
            catch (err) {
                if (!opts.force)
                    throw err;
                if (installType !== 'general') {
                    throw new Error('Named installation cannot be used to regenerate the node_modules structure. Run pnpm install --force');
                }
                pnpm_logger_1.default.info(`Recreating ${modulesPath}`);
                yield removeAllExceptOuterLinks(modulesPath);
                return getContext(opts);
            }
        }
        // ignore `shrinkwrap.yaml` on CI servers
        // a latest pnpm should not break all the builds
        const shrOpts = { ignoreIncompatible: opts.force || isCI };
        const files = yield Promise.all([
            (opts.global ? readGlobalPkgJson(opts.prefix) : readPkg_1.fromDir(opts.prefix)),
            pnpm_shrinkwrap_1.read(root, shrOpts),
            pnpm_shrinkwrap_1.readPrivate(root, shrOpts),
            package_store_1.read(storePath),
            mkdirp(storePath),
        ]);
        const ctx = {
            pkg: files[0],
            root,
            storePath,
            shrinkwrap: files[1] || pnpm_shrinkwrap_1.create(opts.registry),
            privateShrinkwrap: files[2] || pnpm_shrinkwrap_1.create(opts.registry),
            existsPublicShrinkwrap: !!files[1],
            existsPrivateShrinkwrap: !!files[2],
            storeIndex: files[3] || {},
            skipped: new Set(modules && modules.skipped || []),
        };
        return ctx;
    });
}
exports.default = getContext;
const DefaultGlobalPkg = {
    name: 'pnpm-global-pkg',
    version: '1.0.0',
    private: true,
};
function readGlobalPkgJson(globalPkgPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const globalPkgJson = yield readPkg_1.fromDir(globalPkgPath);
            return globalPkgJson;
        }
        catch (err) {
            yield writePkg(globalPkgPath, DefaultGlobalPkg);
            return DefaultGlobalPkg;
        }
    });
}
//# sourceMappingURL=getContext.js.map