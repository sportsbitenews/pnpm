export declare type OutdatedPackage = {
    packageName: string;
    current?: string;
    wanted: string;
    latest: string;
};
export default function (pkgPath: string, opts: {
    offline: boolean;
    store: string;
    proxy?: string;
    httpsProxy?: string;
    localAddress?: string;
    cert?: string;
    key?: string;
    ca?: string;
    strictSsl: boolean;
    fetchRetries: number;
    fetchRetryFactor: number;
    fetchRetryMintimeout: number;
    fetchRetryMaxtimeout: number;
    userAgent: string;
    tag: string;
    networkConcurrency: number;
    rawNpmConfig: Object;
    alwaysAuth: boolean;
}): Promise<OutdatedPackage[]>;
export declare function forPackages(packages: string[], pkgPath: string, opts: {
    offline: boolean;
    store: string;
    proxy?: string;
    httpsProxy?: string;
    localAddress?: string;
    cert?: string;
    key?: string;
    ca?: string;
    strictSsl: boolean;
    fetchRetries: number;
    fetchRetryFactor: number;
    fetchRetryMintimeout: number;
    fetchRetryMaxtimeout: number;
    userAgent: string;
    tag: string;
    networkConcurrency: number;
    rawNpmConfig: Object;
    alwaysAuth: boolean;
}): Promise<OutdatedPackage[]>;
