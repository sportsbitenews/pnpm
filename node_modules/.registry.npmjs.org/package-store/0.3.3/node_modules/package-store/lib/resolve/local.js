"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const readPkg_1 = require("../fs/readPkg");
const normalize = require("normalize-path");
/**
 * Resolves a package hosted on the local filesystem
 */
function resolveLocal(spec, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const dependencyPath = normalize(path.relative(opts.prefix, spec.fetchSpec));
        const id = `file:${dependencyPath}`;
        if (spec.type === 'file') {
            const resolution = {
                tarball: id,
            };
            return {
                id,
                resolution,
            };
        }
        const localPkg = yield readPkg_1.fromDir(dependencyPath);
        const resolution = {
            type: 'directory',
            directory: dependencyPath,
        };
        return {
            id,
            resolution,
            package: localPkg,
        };
    });
}
exports.default = resolveLocal;
//# sourceMappingURL=local.js.map